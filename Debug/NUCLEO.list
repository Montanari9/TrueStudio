
NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08002568  08002568  00012568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080026a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  20000070  08002718  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000124  08002718  00020124  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001142e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002307  00000000  00000000  000314ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000051d8  00000000  00000000  000337d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000770  00000000  00000000  000389b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000950  00000000  00000000  00039120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000453a  00000000  00000000  00039a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000305f  00000000  00000000  0003dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00041009  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c54  00000000  00000000  00041088  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  00042cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  00042d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002550 	.word	0x08002550

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002550 	.word	0x08002550

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 f8a8 	bl	80006fc <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f85e 	bl	800067c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f82f 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f000 ff38 	bl	8001474 <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200000a0 	.word	0x200000a0
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200000a0 	.word	0x200000a0

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b538      	push	{r3, r4, r5, lr}
 8000632:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff6 	bl	8000624 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000638:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	bf1c      	itt	ne
 800063c:	4b05      	ldrne	r3, [pc, #20]	; (8000654 <HAL_Delay+0x24>)
 800063e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000640:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000642:	bf18      	it	ne
 8000644:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000646:	f7ff ffed 	bl	8000624 <HAL_GetTick>
 800064a:	1b40      	subs	r0, r0, r5
 800064c:	4284      	cmp	r4, r0
 800064e:	d8fa      	bhi.n	8000646 <HAL_Delay+0x16>
  {
  }
}
 8000650:	bd38      	pop	{r3, r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000

08000658 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800065a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000668:	0200      	lsls	r0, r0, #8
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000672:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000674:	60d3      	str	r3, [r2, #12]
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	68dc      	ldr	r4, [r3, #12]
 8000682:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000686:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	2b04      	cmp	r3, #4
 800068e:	bf28      	it	cs
 8000690:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 0501 	mov.w	r5, #1
 8000698:	fa05 f303 	lsl.w	r3, r5, r3
 800069c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	4019      	ands	r1, r3
 80006a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006aa:	fa05 f404 	lsl.w	r4, r5, r4
 80006ae:	3c01      	subs	r4, #1
 80006b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	ea42 0201 	orr.w	r2, r2, r1
 80006b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfaf      	iteee	ge
 80006be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f000 000f 	andlt.w	r0, r0, #15
 80006c6:	4b06      	ldrlt	r3, [pc, #24]	; (80006e0 <HAL_NVIC_SetPriority+0x64>)
 80006c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	bfa5      	ittet	ge
 80006cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000ed14 	.word	0xe000ed14

080006e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006e4:	0942      	lsrs	r2, r0, #5
 80006e6:	2301      	movs	r3, #1
 80006e8:	f000 001f 	and.w	r0, r0, #31
 80006ec:	fa03 f000 	lsl.w	r0, r3, r0
 80006f0:	4b01      	ldr	r3, [pc, #4]	; (80006f8 <HAL_NVIC_EnableIRQ+0x14>)
 80006f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006fc:	3801      	subs	r0, #1
 80006fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000702:	d20a      	bcs.n	800071a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	21f0      	movs	r1, #240	; 0xf0
 800070c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000e010 	.word	0xe000e010
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800072a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800072c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800072e:	bf0c      	ite	eq
 8000730:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000734:	f022 0204 	bicne.w	r2, r2, #4
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	4770      	bx	lr
 800073c:	e000e010 	.word	0xe000e010

08000740 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000740:	4770      	bx	lr

08000742 <HAL_SYSTICK_IRQHandler>:
{
 8000742:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000744:	f7ff fffc 	bl	8000740 <HAL_SYSTICK_Callback>
 8000748:	bd08      	pop	{r3, pc}
	...

0800074c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000750:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000752:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000754:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008f4 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000758:	4a64      	ldr	r2, [pc, #400]	; (80008ec <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800075c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000760:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000762:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000764:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000768:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 800076c:	42b7      	cmp	r7, r6
 800076e:	f040 80ad 	bne.w	80008cc <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000772:	684c      	ldr	r4, [r1, #4]
 8000774:	f024 0a10 	bic.w	sl, r4, #16
 8000778:	f1ba 0f02 	cmp.w	sl, #2
 800077c:	d116      	bne.n	80007ac <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800077e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000782:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000786:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800078a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800078e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000792:	f04f 0e0f 	mov.w	lr, #15
 8000796:	fa0e fe0b 	lsl.w	lr, lr, fp
 800079a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800079e:	690d      	ldr	r5, [r1, #16]
 80007a0:	fa05 f50b 	lsl.w	r5, r5, fp
 80007a4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80007a8:	f8cc 5020 	str.w	r5, [ip, #32]
 80007ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007b2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ba:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007bc:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c8:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007cc:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d0:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d4:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007d6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007da:	d815      	bhi.n	8000808 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007dc:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007e0:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007e4:	68cd      	ldr	r5, [r1, #12]
 80007e6:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007ea:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007ee:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007f2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007f6:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007fa:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007fe:	fa0e fe03 	lsl.w	lr, lr, r3
 8000802:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000806:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000808:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800080a:	9d00      	ldr	r5, [sp, #0]
 800080c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800080e:	688f      	ldr	r7, [r1, #8]
 8000810:	fa07 f70c 	lsl.w	r7, r7, ip
 8000814:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000816:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000818:	00e5      	lsls	r5, r4, #3
 800081a:	d557      	bpl.n	80008cc <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081c:	f04f 0b00 	mov.w	fp, #0
 8000820:	f8cd b00c 	str.w	fp, [sp, #12]
 8000824:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000828:	4d31      	ldr	r5, [pc, #196]	; (80008f0 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800082e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000832:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000836:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800083a:	9703      	str	r7, [sp, #12]
 800083c:	9f03      	ldr	r7, [sp, #12]
 800083e:	f023 0703 	bic.w	r7, r3, #3
 8000842:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000846:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800084a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800084e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000852:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000856:	f04f 0e0f 	mov.w	lr, #15
 800085a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800085e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000860:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000864:	d039      	beq.n	80008da <HAL_GPIO_Init+0x18e>
 8000866:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086a:	42a8      	cmp	r0, r5
 800086c:	d037      	beq.n	80008de <HAL_GPIO_Init+0x192>
 800086e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000872:	42a8      	cmp	r0, r5
 8000874:	d035      	beq.n	80008e2 <HAL_GPIO_Init+0x196>
 8000876:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087a:	42a8      	cmp	r0, r5
 800087c:	d033      	beq.n	80008e6 <HAL_GPIO_Init+0x19a>
 800087e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000882:	42a8      	cmp	r0, r5
 8000884:	bf14      	ite	ne
 8000886:	2507      	movne	r5, #7
 8000888:	2504      	moveq	r5, #4
 800088a:	fa05 f50c 	lsl.w	r5, r5, ip
 800088e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000892:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000894:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000896:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000898:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800089c:	bf0c      	ite	eq
 800089e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80008a2:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80008a4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008a6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008aa:	bf0c      	ite	eq
 80008ac:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008ae:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008b0:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008b2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008b4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008b8:	bf0c      	ite	eq
 80008ba:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008bc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008be:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008c0:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008c2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008c4:	bf54      	ite	pl
 80008c6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008c8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008ca:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008cc:	3301      	adds	r3, #1
 80008ce:	2b10      	cmp	r3, #16
 80008d0:	f47f af47 	bne.w	8000762 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008d4:	b005      	add	sp, #20
 80008d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008da:	465d      	mov	r5, fp
 80008dc:	e7d5      	b.n	800088a <HAL_GPIO_Init+0x13e>
 80008de:	2501      	movs	r5, #1
 80008e0:	e7d3      	b.n	800088a <HAL_GPIO_Init+0x13e>
 80008e2:	2502      	movs	r5, #2
 80008e4:	e7d1      	b.n	800088a <HAL_GPIO_Init+0x13e>
 80008e6:	2503      	movs	r5, #3
 80008e8:	e7cf      	b.n	800088a <HAL_GPIO_Init+0x13e>
 80008ea:	bf00      	nop
 80008ec:	40013c00 	.word	0x40013c00
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008f8:	b10a      	cbz	r2, 80008fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008fa:	6181      	str	r1, [r0, #24]
 80008fc:	4770      	bx	lr
 80008fe:	0409      	lsls	r1, r1, #16
 8000900:	e7fb      	b.n	80008fa <HAL_GPIO_WritePin+0x2>

08000902 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000902:	6943      	ldr	r3, [r0, #20]
 8000904:	4059      	eors	r1, r3
 8000906:	6141      	str	r1, [r0, #20]
 8000908:	4770      	bx	lr

0800090a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800090a:	4770      	bx	lr

0800090c <HAL_GPIO_EXTI_IRQHandler>:
{
 800090c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000910:	6959      	ldr	r1, [r3, #20]
 8000912:	4201      	tst	r1, r0
 8000914:	d002      	beq.n	800091c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000916:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000918:	f7ff fff7 	bl	800090a <HAL_GPIO_EXTI_Callback>
 800091c:	bd08      	pop	{r3, pc}
 800091e:	bf00      	nop
 8000920:	40013c00 	.word	0x40013c00

08000924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000924:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000928:	4604      	mov	r4, r0
 800092a:	b918      	cbnz	r0, 8000934 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800092c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800092e:	b002      	add	sp, #8
 8000930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000934:	6803      	ldr	r3, [r0, #0]
 8000936:	07dd      	lsls	r5, r3, #31
 8000938:	d410      	bmi.n	800095c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	0798      	lsls	r0, r3, #30
 800093e:	d458      	bmi.n	80009f2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	071a      	lsls	r2, r3, #28
 8000944:	f100 809a 	bmi.w	8000a7c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	075b      	lsls	r3, r3, #29
 800094c:	f100 80b8 	bmi.w	8000ac0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000950:	69a2      	ldr	r2, [r4, #24]
 8000952:	2a00      	cmp	r2, #0
 8000954:	f040 8119 	bne.w	8000b8a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000958:	2000      	movs	r0, #0
 800095a:	e7e8      	b.n	800092e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800095c:	4ba6      	ldr	r3, [pc, #664]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	f002 020c 	and.w	r2, r2, #12
 8000964:	2a04      	cmp	r2, #4
 8000966:	d007      	beq.n	8000978 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800096e:	2a08      	cmp	r2, #8
 8000970:	d10a      	bne.n	8000988 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	0259      	lsls	r1, r3, #9
 8000976:	d507      	bpl.n	8000988 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000978:	4b9f      	ldr	r3, [pc, #636]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	039a      	lsls	r2, r3, #14
 800097e:	d5dc      	bpl.n	800093a <HAL_RCC_OscConfig+0x16>
 8000980:	6863      	ldr	r3, [r4, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1d9      	bne.n	800093a <HAL_RCC_OscConfig+0x16>
 8000986:	e7d1      	b.n	800092c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000988:	6863      	ldr	r3, [r4, #4]
 800098a:	4d9b      	ldr	r5, [pc, #620]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
 800098c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000990:	d111      	bne.n	80009b6 <HAL_RCC_OscConfig+0x92>
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000998:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800099a:	f7ff fe43 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099e:	4d96      	ldr	r5, [pc, #600]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	039b      	lsls	r3, r3, #14
 80009a6:	d4c8      	bmi.n	800093a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009a8:	f7ff fe3c 	bl	8000624 <HAL_GetTick>
 80009ac:	1b80      	subs	r0, r0, r6
 80009ae:	2864      	cmp	r0, #100	; 0x64
 80009b0:	d9f7      	bls.n	80009a2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80009b2:	2003      	movs	r0, #3
 80009b4:	e7bb      	b.n	800092e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009ba:	d104      	bne.n	80009c6 <HAL_RCC_OscConfig+0xa2>
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c2:	602b      	str	r3, [r5, #0]
 80009c4:	e7e5      	b.n	8000992 <HAL_RCC_OscConfig+0x6e>
 80009c6:	682a      	ldr	r2, [r5, #0]
 80009c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009cc:	602a      	str	r2, [r5, #0]
 80009ce:	682a      	ldr	r2, [r5, #0]
 80009d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009d4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1df      	bne.n	800099a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80009da:	f7ff fe23 	bl	8000624 <HAL_GetTick>
 80009de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	039f      	lsls	r7, r3, #14
 80009e4:	d5a9      	bpl.n	800093a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e6:	f7ff fe1d 	bl	8000624 <HAL_GetTick>
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	2864      	cmp	r0, #100	; 0x64
 80009ee:	d9f7      	bls.n	80009e0 <HAL_RCC_OscConfig+0xbc>
 80009f0:	e7df      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009f2:	4b81      	ldr	r3, [pc, #516]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	f012 0f0c 	tst.w	r2, #12
 80009fa:	d007      	beq.n	8000a0c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a02:	2a08      	cmp	r2, #8
 8000a04:	d111      	bne.n	8000a2a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	025e      	lsls	r6, r3, #9
 8000a0a:	d40e      	bmi.n	8000a2a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a0c:	4b7a      	ldr	r3, [pc, #488]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	0795      	lsls	r5, r2, #30
 8000a12:	d502      	bpl.n	8000a1a <HAL_RCC_OscConfig+0xf6>
 8000a14:	68e2      	ldr	r2, [r4, #12]
 8000a16:	2a01      	cmp	r2, #1
 8000a18:	d188      	bne.n	800092c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	6921      	ldr	r1, [r4, #16]
 8000a1e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a22:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a26:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a28:	e78a      	b.n	8000940 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a2a:	68e2      	ldr	r2, [r4, #12]
 8000a2c:	4b73      	ldr	r3, [pc, #460]	; (8000bfc <HAL_RCC_OscConfig+0x2d8>)
 8000a2e:	b1b2      	cbz	r2, 8000a5e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a34:	f7ff fdf6 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a38:	4d6f      	ldr	r5, [pc, #444]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	0798      	lsls	r0, r3, #30
 8000a40:	d507      	bpl.n	8000a52 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	6922      	ldr	r2, [r4, #16]
 8000a46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a4a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a4e:	602b      	str	r3, [r5, #0]
 8000a50:	e776      	b.n	8000940 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a52:	f7ff fde7 	bl	8000624 <HAL_GetTick>
 8000a56:	1b80      	subs	r0, r0, r6
 8000a58:	2802      	cmp	r0, #2
 8000a5a:	d9ef      	bls.n	8000a3c <HAL_RCC_OscConfig+0x118>
 8000a5c:	e7a9      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a60:	f7ff fde0 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a64:	4d64      	ldr	r5, [pc, #400]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a68:	682b      	ldr	r3, [r5, #0]
 8000a6a:	0799      	lsls	r1, r3, #30
 8000a6c:	f57f af68 	bpl.w	8000940 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a70:	f7ff fdd8 	bl	8000624 <HAL_GetTick>
 8000a74:	1b80      	subs	r0, r0, r6
 8000a76:	2802      	cmp	r0, #2
 8000a78:	d9f6      	bls.n	8000a68 <HAL_RCC_OscConfig+0x144>
 8000a7a:	e79a      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a7c:	6962      	ldr	r2, [r4, #20]
 8000a7e:	4b60      	ldr	r3, [pc, #384]	; (8000c00 <HAL_RCC_OscConfig+0x2dc>)
 8000a80:	b17a      	cbz	r2, 8000aa2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a86:	f7ff fdcd 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a8a:	4d5b      	ldr	r5, [pc, #364]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a8e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a90:	079f      	lsls	r7, r3, #30
 8000a92:	f53f af59 	bmi.w	8000948 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a96:	f7ff fdc5 	bl	8000624 <HAL_GetTick>
 8000a9a:	1b80      	subs	r0, r0, r6
 8000a9c:	2802      	cmp	r0, #2
 8000a9e:	d9f6      	bls.n	8000a8e <HAL_RCC_OscConfig+0x16a>
 8000aa0:	e787      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000aa2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000aa4:	f7ff fdbe 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aa8:	4d53      	ldr	r5, [pc, #332]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000aaa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000aae:	0798      	lsls	r0, r3, #30
 8000ab0:	f57f af4a 	bpl.w	8000948 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ab4:	f7ff fdb6 	bl	8000624 <HAL_GetTick>
 8000ab8:	1b80      	subs	r0, r0, r6
 8000aba:	2802      	cmp	r0, #2
 8000abc:	d9f6      	bls.n	8000aac <HAL_RCC_OscConfig+0x188>
 8000abe:	e778      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ac0:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
 8000ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ac8:	d128      	bne.n	8000b1c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	9201      	str	r2, [sp, #4]
 8000acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ace:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ad2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ade:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae0:	4d48      	ldr	r5, [pc, #288]	; (8000c04 <HAL_RCC_OscConfig+0x2e0>)
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	05d9      	lsls	r1, r3, #23
 8000ae6:	d51b      	bpl.n	8000b20 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae8:	68a3      	ldr	r3, [r4, #8]
 8000aea:	4d43      	ldr	r5, [pc, #268]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d127      	bne.n	8000b40 <HAL_RCC_OscConfig+0x21c>
 8000af0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000af8:	f7ff fd94 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000afc:	4d3e      	ldr	r5, [pc, #248]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000afe:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b00:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b06:	079b      	lsls	r3, r3, #30
 8000b08:	d539      	bpl.n	8000b7e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	f43f af20 	beq.w	8000950 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b10:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
 8000b12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	e719      	b.n	8000950 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	e7df      	b.n	8000ae0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b20:	682b      	ldr	r3, [r5, #0]
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b28:	f7ff fd7c 	bl	8000624 <HAL_GetTick>
 8000b2c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b2e:	682b      	ldr	r3, [r5, #0]
 8000b30:	05da      	lsls	r2, r3, #23
 8000b32:	d4d9      	bmi.n	8000ae8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b34:	f7ff fd76 	bl	8000624 <HAL_GetTick>
 8000b38:	1bc0      	subs	r0, r0, r7
 8000b3a:	2802      	cmp	r0, #2
 8000b3c:	d9f7      	bls.n	8000b2e <HAL_RCC_OscConfig+0x20a>
 8000b3e:	e738      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	d104      	bne.n	8000b4e <HAL_RCC_OscConfig+0x22a>
 8000b44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	672b      	str	r3, [r5, #112]	; 0x70
 8000b4c:	e7d0      	b.n	8000af0 <HAL_RCC_OscConfig+0x1cc>
 8000b4e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b50:	f022 0201 	bic.w	r2, r2, #1
 8000b54:	672a      	str	r2, [r5, #112]	; 0x70
 8000b56:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b58:	f022 0204 	bic.w	r2, r2, #4
 8000b5c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1ca      	bne.n	8000af8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b62:	f7ff fd5f 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b66:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b6a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b6e:	0798      	lsls	r0, r3, #30
 8000b70:	d5cb      	bpl.n	8000b0a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b72:	f7ff fd57 	bl	8000624 <HAL_GetTick>
 8000b76:	1bc0      	subs	r0, r0, r7
 8000b78:	4540      	cmp	r0, r8
 8000b7a:	d9f7      	bls.n	8000b6c <HAL_RCC_OscConfig+0x248>
 8000b7c:	e719      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b7e:	f7ff fd51 	bl	8000624 <HAL_GetTick>
 8000b82:	1bc0      	subs	r0, r0, r7
 8000b84:	4540      	cmp	r0, r8
 8000b86:	d9bd      	bls.n	8000b04 <HAL_RCC_OscConfig+0x1e0>
 8000b88:	e713      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b8a:	4d1b      	ldr	r5, [pc, #108]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
 8000b8c:	68ab      	ldr	r3, [r5, #8]
 8000b8e:	f003 030c 	and.w	r3, r3, #12
 8000b92:	2b08      	cmp	r3, #8
 8000b94:	f43f aeca 	beq.w	800092c <HAL_RCC_OscConfig+0x8>
 8000b98:	4e1b      	ldr	r6, [pc, #108]	; (8000c08 <HAL_RCC_OscConfig+0x2e4>)
 8000b9a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b9c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b9e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ba0:	d134      	bne.n	8000c0c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fd3f 	bl	8000624 <HAL_GetTick>
 8000ba6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	0199      	lsls	r1, r3, #6
 8000bac:	d41e      	bmi.n	8000bec <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bae:	6a22      	ldr	r2, [r4, #32]
 8000bb0:	69e3      	ldr	r3, [r4, #28]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bb6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000bba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bbc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bc0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bc2:	4c0d      	ldr	r4, [pc, #52]	; (8000bf8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bc4:	0852      	lsrs	r2, r2, #1
 8000bc6:	3a01      	subs	r2, #1
 8000bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bcc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bce:	2301      	movs	r3, #1
 8000bd0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fd27 	bl	8000624 <HAL_GetTick>
 8000bd6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	019a      	lsls	r2, r3, #6
 8000bdc:	f53f aebc 	bmi.w	8000958 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000be0:	f7ff fd20 	bl	8000624 <HAL_GetTick>
 8000be4:	1b40      	subs	r0, r0, r5
 8000be6:	2802      	cmp	r0, #2
 8000be8:	d9f6      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x2b4>
 8000bea:	e6e2      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bec:	f7ff fd1a 	bl	8000624 <HAL_GetTick>
 8000bf0:	1bc0      	subs	r0, r0, r7
 8000bf2:	2802      	cmp	r0, #2
 8000bf4:	d9d8      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x284>
 8000bf6:	e6dc      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	42470000 	.word	0x42470000
 8000c00:	42470e80 	.word	0x42470e80
 8000c04:	40007000 	.word	0x40007000
 8000c08:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fd0a 	bl	8000624 <HAL_GetTick>
 8000c10:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c12:	682b      	ldr	r3, [r5, #0]
 8000c14:	019b      	lsls	r3, r3, #6
 8000c16:	f57f ae9f 	bpl.w	8000958 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c1a:	f7ff fd03 	bl	8000624 <HAL_GetTick>
 8000c1e:	1b00      	subs	r0, r0, r4
 8000c20:	2802      	cmp	r0, #2
 8000c22:	d9f6      	bls.n	8000c12 <HAL_RCC_OscConfig+0x2ee>
 8000c24:	e6c5      	b.n	80009b2 <HAL_RCC_OscConfig+0x8e>
 8000c26:	bf00      	nop

08000c28 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c28:	4913      	ldr	r1, [pc, #76]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c2a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c2c:	688b      	ldr	r3, [r1, #8]
 8000c2e:	f003 030c 	and.w	r3, r3, #12
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d003      	beq.n	8000c3e <HAL_RCC_GetSysClockFreq+0x16>
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d003      	beq.n	8000c42 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c3a:	4810      	ldr	r0, [pc, #64]	; (8000c7c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c3c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c3e:	4810      	ldr	r0, [pc, #64]	; (8000c80 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c40:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c42:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c44:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c46:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c48:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4c:	bf14      	ite	ne
 8000c4e:	480c      	ldrne	r0, [pc, #48]	; (8000c80 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c50:	480a      	ldreq	r0, [pc, #40]	; (8000c7c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c52:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c56:	bf18      	it	ne
 8000c58:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c5e:	fba1 0100 	umull	r0, r1, r1, r0
 8000c62:	f7ff fb0d 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c6e:	3301      	adds	r3, #1
 8000c70:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c72:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c76:	bd08      	pop	{r3, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	00f42400 	.word	0x00f42400
 8000c80:	007a1200 	.word	0x007a1200

08000c84 <HAL_RCC_ClockConfig>:
{
 8000c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c88:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	b910      	cbnz	r0, 8000c94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c8e:	2001      	movs	r0, #1
 8000c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c94:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <HAL_RCC_ClockConfig+0x124>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	f002 020f 	and.w	r2, r2, #15
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	d328      	bcc.n	8000cf2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca0:	6821      	ldr	r1, [r4, #0]
 8000ca2:	078f      	lsls	r7, r1, #30
 8000ca4:	d42d      	bmi.n	8000d02 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ca6:	07c8      	lsls	r0, r1, #31
 8000ca8:	d440      	bmi.n	8000d2c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000caa:	4b3f      	ldr	r3, [pc, #252]	; (8000da8 <HAL_RCC_ClockConfig+0x124>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	f002 020f 	and.w	r2, r2, #15
 8000cb2:	4295      	cmp	r5, r2
 8000cb4:	d366      	bcc.n	8000d84 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb6:	6822      	ldr	r2, [r4, #0]
 8000cb8:	0751      	lsls	r1, r2, #29
 8000cba:	d46c      	bmi.n	8000d96 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cbc:	0713      	lsls	r3, r2, #28
 8000cbe:	d507      	bpl.n	8000cd0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cc0:	4a3a      	ldr	r2, [pc, #232]	; (8000dac <HAL_RCC_ClockConfig+0x128>)
 8000cc2:	6921      	ldr	r1, [r4, #16]
 8000cc4:	6893      	ldr	r3, [r2, #8]
 8000cc6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cd0:	f7ff ffaa 	bl	8000c28 <HAL_RCC_GetSysClockFreq>
 8000cd4:	4b35      	ldr	r3, [pc, #212]	; (8000dac <HAL_RCC_ClockConfig+0x128>)
 8000cd6:	4a36      	ldr	r2, [pc, #216]	; (8000db0 <HAL_RCC_ClockConfig+0x12c>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cde:	5cd3      	ldrb	r3, [r2, r3]
 8000ce0:	40d8      	lsrs	r0, r3
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <HAL_RCC_ClockConfig+0x130>)
 8000ce4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fc52 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8000cec:	2000      	movs	r0, #0
 8000cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cf2:	b2ca      	uxtb	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d1c6      	bne.n	8000c8e <HAL_RCC_ClockConfig+0xa>
 8000d00:	e7ce      	b.n	8000ca0 <HAL_RCC_ClockConfig+0x1c>
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d04:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d08:	bf1e      	ittt	ne
 8000d0a:	689a      	ldrne	r2, [r3, #8]
 8000d0c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d10:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d12:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d14:	bf42      	ittt	mi
 8000d16:	689a      	ldrmi	r2, [r3, #8]
 8000d18:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d1c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	68a0      	ldr	r0, [r4, #8]
 8000d22:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d26:	4302      	orrs	r2, r0
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	e7bc      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d2c:	6862      	ldr	r2, [r4, #4]
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <HAL_RCC_ClockConfig+0x128>)
 8000d30:	2a01      	cmp	r2, #1
 8000d32:	d11d      	bne.n	8000d70 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3a:	d0a8      	beq.n	8000c8e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d3c:	4e1b      	ldr	r6, [pc, #108]	; (8000dac <HAL_RCC_ClockConfig+0x128>)
 8000d3e:	68b3      	ldr	r3, [r6, #8]
 8000d40:	f023 0303 	bic.w	r3, r3, #3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d48:	f7ff fc6c 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d50:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d52:	68b3      	ldr	r3, [r6, #8]
 8000d54:	6862      	ldr	r2, [r4, #4]
 8000d56:	f003 030c 	and.w	r3, r3, #12
 8000d5a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d5e:	d0a4      	beq.n	8000caa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d60:	f7ff fc60 	bl	8000624 <HAL_GetTick>
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4540      	cmp	r0, r8
 8000d68:	d9f3      	bls.n	8000d52 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d6a:	2003      	movs	r0, #3
}
 8000d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d70:	1e91      	subs	r1, r2, #2
 8000d72:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d74:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d76:	d802      	bhi.n	8000d7e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d7c:	e7dd      	b.n	8000d3a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7e:	f013 0f02 	tst.w	r3, #2
 8000d82:	e7da      	b.n	8000d3a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d84:	b2ea      	uxtb	r2, r5
 8000d86:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	429d      	cmp	r5, r3
 8000d90:	f47f af7d 	bne.w	8000c8e <HAL_RCC_ClockConfig+0xa>
 8000d94:	e78f      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d96:	4905      	ldr	r1, [pc, #20]	; (8000dac <HAL_RCC_ClockConfig+0x128>)
 8000d98:	68e0      	ldr	r0, [r4, #12]
 8000d9a:	688b      	ldr	r3, [r1, #8]
 8000d9c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000da0:	4303      	orrs	r3, r0
 8000da2:	608b      	str	r3, [r1, #8]
 8000da4:	e78a      	b.n	8000cbc <HAL_RCC_ClockConfig+0x38>
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00
 8000dac:	40023800 	.word	0x40023800
 8000db0:	080025cc 	.word	0x080025cc
 8000db4:	20000008 	.word	0x20000008

08000db8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dd2:	6810      	ldr	r0, [r2, #0]
}
 8000dd4:	40d8      	lsrs	r0, r3
 8000dd6:	4770      	bx	lr
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	080025dc 	.word	0x080025dc
 8000de0:	20000008 	.word	0x20000008

08000de4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000df2:	6810      	ldr	r0, [r2, #0]
}
 8000df4:	40d8      	lsrs	r0, r3
 8000df6:	4770      	bx	lr
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	080025dc 	.word	0x080025dc
 8000e00:	20000008 	.word	0x20000008

08000e04 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e04:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8000e06:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e08:	4290      	cmp	r0, r2
 8000e0a:	d00e      	beq.n	8000e2a <TIM_Base_SetConfig+0x26>
 8000e0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e10:	d00b      	beq.n	8000e2a <TIM_Base_SetConfig+0x26>
 8000e12:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d007      	beq.n	8000e2a <TIM_Base_SetConfig+0x26>
 8000e1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	d003      	beq.n	8000e2a <TIM_Base_SetConfig+0x26>
 8000e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d119      	bne.n	8000e5e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e2a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e30:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000e32:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <TIM_Base_SetConfig+0x8c>)
 8000e34:	4290      	cmp	r0, r2
 8000e36:	d104      	bne.n	8000e42 <TIM_Base_SetConfig+0x3e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e38:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	e018      	b.n	8000e74 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000e42:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e46:	d0f7      	beq.n	8000e38 <TIM_Base_SetConfig+0x34>
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <TIM_Base_SetConfig+0x90>)
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	d0f4      	beq.n	8000e38 <TIM_Base_SetConfig+0x34>
 8000e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d0f0      	beq.n	8000e38 <TIM_Base_SetConfig+0x34>
 8000e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	d0ec      	beq.n	8000e38 <TIM_Base_SetConfig+0x34>
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <TIM_Base_SetConfig+0x94>)
 8000e60:	4290      	cmp	r0, r2
 8000e62:	d0e9      	beq.n	8000e38 <TIM_Base_SetConfig+0x34>
 8000e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e68:	4290      	cmp	r0, r2
 8000e6a:	d0e5      	beq.n	8000e38 <TIM_Base_SetConfig+0x34>
 8000e6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d0e1      	beq.n	8000e38 <TIM_Base_SetConfig+0x34>
  }

  TIMx->CR1 = tmpcr1;
 8000e74:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e76:	688b      	ldr	r3, [r1, #8]
 8000e78:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e7a:	680b      	ldr	r3, [r1, #0]
 8000e7c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <TIM_Base_SetConfig+0x8c>)
 8000e80:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e82:	bf04      	itt	eq
 8000e84:	690b      	ldreq	r3, [r1, #16]
 8000e86:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	6143      	str	r3, [r0, #20]
}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40010000 	.word	0x40010000
 8000e94:	40000400 	.word	0x40000400
 8000e98:	40014000 	.word	0x40014000

08000e9c <HAL_TIM_Base_Init>:
{ 
 8000e9c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	b1a0      	cbz	r0, 8000ecc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000ea2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ea6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eaa:	b91b      	cbnz	r3, 8000eb4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000eac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000eb0:	f000 fb6c 	bl	800158c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000eba:	6820      	ldr	r0, [r4, #0]
 8000ebc:	1d21      	adds	r1, r4, #4
 8000ebe:	f7ff ffa1 	bl	8000e04 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000ec8:	2000      	movs	r0, #0
 8000eca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
}
 8000ece:	bd10      	pop	{r4, pc}

08000ed0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000ed4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ed6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000ed8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000eda:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000edc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ee0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000ee2:	6133      	str	r3, [r6, #16]
{
 8000ee4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ee6:	6883      	ldr	r3, [r0, #8]
 8000ee8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000eea:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000eec:	4303      	orrs	r3, r0
 8000eee:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000ef0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ef4:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000ef6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000efa:	430b      	orrs	r3, r1
 8000efc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000efe:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000f00:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000f02:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000f08:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f0a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000f0e:	6173      	str	r3, [r6, #20]
 8000f10:	4b7a      	ldr	r3, [pc, #488]	; (80010fc <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f12:	d17c      	bne.n	800100e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f14:	429e      	cmp	r6, r3
 8000f16:	d003      	beq.n	8000f20 <UART_SetConfig+0x50>
 8000f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f1c:	429e      	cmp	r6, r3
 8000f1e:	d144      	bne.n	8000faa <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f20:	f7ff ff60 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8000f24:	2519      	movs	r5, #25
 8000f26:	fb05 f300 	mul.w	r3, r5, r0
 8000f2a:	6860      	ldr	r0, [r4, #4]
 8000f2c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f30:	0040      	lsls	r0, r0, #1
 8000f32:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f36:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000f3e:	f7ff ff51 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8000f42:	6863      	ldr	r3, [r4, #4]
 8000f44:	4368      	muls	r0, r5
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f4c:	f7ff ff4a 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8000f50:	6863      	ldr	r3, [r4, #4]
 8000f52:	4368      	muls	r0, r5
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f5a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f5e:	fb09 7313 	mls	r3, r9, r3, r7
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	3332      	adds	r3, #50	; 0x32
 8000f66:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000f70:	f7ff ff38 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8000f74:	6862      	ldr	r2, [r4, #4]
 8000f76:	4368      	muls	r0, r5
 8000f78:	0052      	lsls	r2, r2, #1
 8000f7a:	fbb0 faf2 	udiv	sl, r0, r2
 8000f7e:	f7ff ff31 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f82:	6863      	ldr	r3, [r4, #4]
 8000f84:	4368      	muls	r0, r5
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f90:	fb09 a313 	mls	r3, r9, r3, sl
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	3332      	adds	r3, #50	; 0x32
 8000f98:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000fa2:	443b      	add	r3, r7
 8000fa4:	60b3      	str	r3, [r6, #8]
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000faa:	f7ff ff0b 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 8000fae:	2519      	movs	r5, #25
 8000fb0:	fb05 f300 	mul.w	r3, r5, r0
 8000fb4:	6860      	ldr	r0, [r4, #4]
 8000fb6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fba:	0040      	lsls	r0, r0, #1
 8000fbc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fc0:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000fc8:	f7ff fefc 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 8000fcc:	6863      	ldr	r3, [r4, #4]
 8000fce:	4368      	muls	r0, r5
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fbb0 f7f3 	udiv	r7, r0, r3
 8000fd6:	f7ff fef5 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	4368      	muls	r0, r5
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fe4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fe8:	fb09 7313 	mls	r3, r9, r3, r7
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	3332      	adds	r3, #50	; 0x32
 8000ff0:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000ffa:	f7ff fee3 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 8000ffe:	6862      	ldr	r2, [r4, #4]
 8001000:	4368      	muls	r0, r5
 8001002:	0052      	lsls	r2, r2, #1
 8001004:	fbb0 faf2 	udiv	sl, r0, r2
 8001008:	f7ff fedc 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 800100c:	e7b9      	b.n	8000f82 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800100e:	429e      	cmp	r6, r3
 8001010:	d002      	beq.n	8001018 <UART_SetConfig+0x148>
 8001012:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <UART_SetConfig+0x230>)
 8001014:	429e      	cmp	r6, r3
 8001016:	d140      	bne.n	800109a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001018:	f7ff fee4 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 800101c:	6867      	ldr	r7, [r4, #4]
 800101e:	2519      	movs	r5, #25
 8001020:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001024:	fb05 f300 	mul.w	r3, r5, r0
 8001028:	00bf      	lsls	r7, r7, #2
 800102a:	fbb3 f3f7 	udiv	r3, r3, r7
 800102e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001032:	011f      	lsls	r7, r3, #4
 8001034:	f7ff fed6 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001038:	6863      	ldr	r3, [r4, #4]
 800103a:	4368      	muls	r0, r5
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001042:	f7ff fecf 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001046:	6863      	ldr	r3, [r4, #4]
 8001048:	4368      	muls	r0, r5
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001050:	fbb3 f3f9 	udiv	r3, r3, r9
 8001054:	fb09 8313 	mls	r3, r9, r3, r8
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	3332      	adds	r3, #50	; 0x32
 800105c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001060:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001064:	f7ff febe 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001068:	6862      	ldr	r2, [r4, #4]
 800106a:	4368      	muls	r0, r5
 800106c:	0092      	lsls	r2, r2, #2
 800106e:	fbb0 faf2 	udiv	sl, r0, r2
 8001072:	f7ff feb7 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001076:	6863      	ldr	r3, [r4, #4]
 8001078:	4368      	muls	r0, r5
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001080:	fbb3 f3f9 	udiv	r3, r3, r9
 8001084:	fb09 a313 	mls	r3, r9, r3, sl
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	3332      	adds	r3, #50	; 0x32
 800108c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	ea43 0308 	orr.w	r3, r3, r8
 8001098:	e783      	b.n	8000fa2 <UART_SetConfig+0xd2>
 800109a:	f7ff fe93 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 800109e:	6867      	ldr	r7, [r4, #4]
 80010a0:	2519      	movs	r5, #25
 80010a2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010a6:	fb05 f300 	mul.w	r3, r5, r0
 80010aa:	00bf      	lsls	r7, r7, #2
 80010ac:	fbb3 f3f7 	udiv	r3, r3, r7
 80010b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80010b4:	011f      	lsls	r7, r3, #4
 80010b6:	f7ff fe85 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80010ba:	6863      	ldr	r3, [r4, #4]
 80010bc:	4368      	muls	r0, r5
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	fbb0 f8f3 	udiv	r8, r0, r3
 80010c4:	f7ff fe7e 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80010c8:	6863      	ldr	r3, [r4, #4]
 80010ca:	4368      	muls	r0, r5
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80010d6:	fb09 8313 	mls	r3, r9, r3, r8
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	3332      	adds	r3, #50	; 0x32
 80010de:	fbb3 f3f9 	udiv	r3, r3, r9
 80010e2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80010e6:	f7ff fe6d 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80010ea:	6862      	ldr	r2, [r4, #4]
 80010ec:	4368      	muls	r0, r5
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	fbb0 faf2 	udiv	sl, r0, r2
 80010f4:	f7ff fe66 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80010f8:	e7bd      	b.n	8001076 <UART_SetConfig+0x1a6>
 80010fa:	bf00      	nop
 80010fc:	40011000 	.word	0x40011000
 8001100:	40011400 	.word	0x40011400

08001104 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	4604      	mov	r4, r0
 8001108:	460e      	mov	r6, r1
 800110a:	4617      	mov	r7, r2
 800110c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800110e:	6821      	ldr	r1, [r4, #0]
 8001110:	680b      	ldr	r3, [r1, #0]
 8001112:	ea36 0303 	bics.w	r3, r6, r3
 8001116:	d101      	bne.n	800111c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001118:	2000      	movs	r0, #0
}
 800111a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800111c:	1c6b      	adds	r3, r5, #1
 800111e:	d0f7      	beq.n	8001110 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001120:	b995      	cbnz	r5, 8001148 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800112a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001134:	2320      	movs	r3, #32
 8001136:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800113a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800113e:	2300      	movs	r3, #0
 8001140:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001144:	2003      	movs	r0, #3
 8001146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001148:	f7ff fa6c 	bl	8000624 <HAL_GetTick>
 800114c:	1bc0      	subs	r0, r0, r7
 800114e:	4285      	cmp	r5, r0
 8001150:	d2dd      	bcs.n	800110e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001152:	e7e6      	b.n	8001122 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001154 <HAL_UART_Init>:
{
 8001154:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001156:	4604      	mov	r4, r0
 8001158:	b340      	cbz	r0, 80011ac <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800115a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800115e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001162:	b91b      	cbnz	r3, 800116c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001164:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001168:	f000 fa48 	bl	80015fc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800116c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800116e:	2324      	movs	r3, #36	; 0x24
 8001170:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001174:	68d3      	ldr	r3, [r2, #12]
 8001176:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800117a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff fea7 	bl	8000ed0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800118a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001192:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800119a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800119c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800119e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80011a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80011a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80011aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011ac:	2001      	movs	r0, #1
}
 80011ae:	bd10      	pop	{r4, pc}

080011b0 <HAL_UART_Transmit>:
{
 80011b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80011b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011ba:	2b20      	cmp	r3, #32
{
 80011bc:	4604      	mov	r4, r0
 80011be:	460d      	mov	r5, r1
 80011c0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80011c2:	d14f      	bne.n	8001264 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80011c4:	2900      	cmp	r1, #0
 80011c6:	d04a      	beq.n	800125e <HAL_UART_Transmit+0xae>
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	d048      	beq.n	800125e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80011cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d047      	beq.n	8001264 <HAL_UART_Transmit+0xb4>
 80011d4:	2301      	movs	r3, #1
 80011d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011de:	2321      	movs	r3, #33	; 0x21
 80011e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80011e4:	f7ff fa1e 	bl	8000624 <HAL_GetTick>
    huart->TxXferSize = Size;
 80011e8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80011ec:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80011ee:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80011f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b96b      	cbnz	r3, 8001214 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4632      	mov	r2, r6
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff ff80 	bl	8001104 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001204:	b9b0      	cbnz	r0, 8001234 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001206:	2320      	movs	r3, #32
 8001208:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800120c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001214:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001216:	3b01      	subs	r3, #1
 8001218:	b29b      	uxth	r3, r3
 800121a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800121c:	68a3      	ldr	r3, [r4, #8]
 800121e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001222:	4632      	mov	r2, r6
 8001224:	463b      	mov	r3, r7
 8001226:	f04f 0180 	mov.w	r1, #128	; 0x80
 800122a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800122c:	d10e      	bne.n	800124c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800122e:	f7ff ff69 	bl	8001104 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001232:	b110      	cbz	r0, 800123a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001234:	2003      	movs	r0, #3
 8001236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800123a:	882b      	ldrh	r3, [r5, #0]
 800123c:	6822      	ldr	r2, [r4, #0]
 800123e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001242:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001244:	6923      	ldr	r3, [r4, #16]
 8001246:	b943      	cbnz	r3, 800125a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001248:	3502      	adds	r5, #2
 800124a:	e7d2      	b.n	80011f2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800124c:	f7ff ff5a 	bl	8001104 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001250:	2800      	cmp	r0, #0
 8001252:	d1ef      	bne.n	8001234 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	782a      	ldrb	r2, [r5, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	3501      	adds	r5, #1
 800125c:	e7c9      	b.n	80011f2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800125e:	2001      	movs	r0, #1
 8001260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001264:	2002      	movs	r0, #2
}
 8001266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800126c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800126c:	b530      	push	{r4, r5, lr}
 800126e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001272:	4d27      	ldr	r5, [pc, #156]	; (8001310 <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001274:	2400      	movs	r4, #0
 8001276:	9401      	str	r4, [sp, #4]
 8001278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800127a:	f042 0204 	orr.w	r2, r2, #4
 800127e:	631a      	str	r2, [r3, #48]	; 0x30
 8001280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001282:	f002 0204 	and.w	r2, r2, #4
 8001286:	9201      	str	r2, [sp, #4]
 8001288:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	9402      	str	r4, [sp, #8]
 800128c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
 8001294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001296:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800129a:	9202      	str	r2, [sp, #8]
 800129c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	9403      	str	r4, [sp, #12]
 80012a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	631a      	str	r2, [r3, #48]	; 0x30
 80012a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012aa:	f002 0201 	and.w	r2, r2, #1
 80012ae:	9203      	str	r2, [sp, #12]
 80012b0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	9404      	str	r4, [sp, #16]
 80012b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b6:	f042 0202 	orr.w	r2, r2, #2
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c6:	4628      	mov	r0, r5
 80012c8:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012cc:	f7ff fb14 	bl	80008f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_GPIO_Init+0xa8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <MX_GPIO_Init+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012dc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f7ff fa34 	bl	800074c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012e4:	2320      	movs	r3, #32
 80012e6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ec:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f7ff fa2a 	bl	800074c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80012f8:	4622      	mov	r2, r4
 80012fa:	2102      	movs	r1, #2
 80012fc:	2028      	movs	r0, #40	; 0x28
 80012fe:	f7ff f9bd 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001302:	2028      	movs	r0, #40	; 0x28
 8001304:	f7ff f9ee 	bl	80006e4 <HAL_NVIC_EnableIRQ>

}
 8001308:	b00b      	add	sp, #44	; 0x2c
 800130a:	bd30      	pop	{r4, r5, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	10210000 	.word	0x10210000
 8001318:	40020800 	.word	0x40020800

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b530      	push	{r4, r5, lr}
 800131e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2200      	movs	r2, #0
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <SystemClock_Config+0xa4>)
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001328:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800132c:	6419      	str	r1, [r3, #64]	; 0x40
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001330:	4924      	ldr	r1, [pc, #144]	; (80013c4 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800133a:	9202      	str	r2, [sp, #8]
 800133c:	680b      	ldr	r3, [r1, #0]
 800133e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800134a:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800134c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001354:	2301      	movs	r3, #1
 8001356:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001358:	2310      	movs	r3, #16
 800135a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 800135c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800135e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001362:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001364:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001366:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001368:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001370:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001372:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f7ff fad6 	bl	8000924 <HAL_RCC_OscConfig>
 8001378:	b100      	cbz	r0, 800137c <SystemClock_Config+0x60>
 800137a:	e7fe      	b.n	800137a <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001386:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001388:	4621      	mov	r1, r4
 800138a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001390:	f7ff fc78 	bl	8000c84 <HAL_RCC_ClockConfig>
 8001394:	4604      	mov	r4, r0
 8001396:	b100      	cbz	r0, 800139a <SystemClock_Config+0x7e>
 8001398:	e7fe      	b.n	8001398 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800139a:	f7ff fd0d 	bl	8000db8 <HAL_RCC_GetHCLKFreq>
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80013a6:	f7ff f9a9 	bl	80006fc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013aa:	4628      	mov	r0, r5
 80013ac:	f7ff f9bc 	bl	8000728 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013b0:	4622      	mov	r2, r4
 80013b2:	4621      	mov	r1, r4
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff f960 	bl	800067c <HAL_NVIC_SetPriority>
}
 80013bc:	b015      	add	sp, #84	; 0x54
 80013be:	bd30      	pop	{r4, r5, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <main>:
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 80013ca:	f7ff f905 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 80013ce:	f7ff ffa5 	bl	800131c <SystemClock_Config>
  MX_GPIO_Init();
 80013d2:	f7ff ff4b 	bl	800126c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013d6:	f000 f8f1 	bl	80015bc <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80013da:	f000 f8bd 	bl	8001558 <MX_TIM10_Init>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80013de:	4d11      	ldr	r5, [pc, #68]	; (8001424 <main+0x5c>)
		  MyGlobalVariable1 = buf[i];
 80013e0:	4e11      	ldr	r6, [pc, #68]	; (8001428 <main+0x60>)
	uint8_t i = 0;
 80013e2:	2400      	movs	r4, #0
	  HAL_Delay(100);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f7ff f923 	bl	8000630 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80013ea:	4628      	mov	r0, r5
 80013ec:	2120      	movs	r1, #32
 80013ee:	f7ff fa88 	bl	8000902 <HAL_GPIO_TogglePin>
	  if(i < 32){
 80013f2:	2c1f      	cmp	r4, #31
		  MyGlobalVariable1 = buf[i];
 80013f4:	bf98      	it	ls
 80013f6:	4b0d      	ldrls	r3, [pc, #52]	; (800142c <main+0x64>)
	  printf("hi there %i \n", MyGlobalVariable);
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <main+0x68>)
		  MyGlobalVariable1 = buf[i];
 80013fa:	bf9c      	itt	ls
 80013fc:	f833 3014 	ldrhls.w	r3, [r3, r4, lsl #1]
 8001400:	8033      	strhls	r3, [r6, #0]
	  printf("hi there %i \n", MyGlobalVariable);
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <main+0x6c>)
		  i++;
 8001404:	bf98      	it	ls
 8001406:	3401      	addls	r4, #1
	  printf("hi there %i \n", MyGlobalVariable);
 8001408:	6819      	ldr	r1, [r3, #0]
		  i++;
 800140a:	bf94      	ite	ls
 800140c:	b2e4      	uxtbls	r4, r4
		  i = 0;
 800140e:	2400      	movhi	r4, #0
	  printf("hi there %i \n", MyGlobalVariable);
 8001410:	f000 f968 	bl	80016e4 <iprintf>
	  HAL_UART_Transmit(&huart2,"hi there using uart2\n",22 ,100);
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	2216      	movs	r2, #22
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <main+0x70>)
 800141a:	4808      	ldr	r0, [pc, #32]	; (800143c <main+0x74>)
 800141c:	f7ff fec8 	bl	80011b0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001420:	e7e0      	b.n	80013e4 <main+0x1c>
 8001422:	bf00      	nop
 8001424:	40020000 	.word	0x40020000
 8001428:	20000090 	.word	0x20000090
 800142c:	08002568 	.word	0x08002568
 8001430:	080025a8 	.word	0x080025a8
 8001434:	2000008c 	.word	0x2000008c
 8001438:	080025b6 	.word	0x080025b6
 800143c:	200000e0 	.word	0x200000e0

08001440 <_write>:

/* USER CODE BEGIN 4 */
#ifdef DEBUG_PRINTF
int  _write(int  file,  char  *ptr,  int  len)
{
 8001440:	b510      	push	{r4, lr}
	int  DataIdx;

	for(DataIdx=0;  DataIdx<len;  DataIdx++)
 8001442:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001444:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8001448:	4293      	cmp	r3, r2
 800144a:	db01      	blt.n	8001450 <_write+0x10>
	{
		ITM_SendChar(*ptr++);
	}
	return  len;
}
 800144c:	4610      	mov	r0, r2
 800144e:	bd10      	pop	{r4, pc}
 8001450:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8001454:	07c0      	lsls	r0, r0, #31
 8001456:	d503      	bpl.n	8001460 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001458:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800145c:	07c0      	lsls	r0, r0, #31
 800145e:	d402      	bmi.n	8001466 <_write+0x26>
	for(DataIdx=0;  DataIdx<len;  DataIdx++)
 8001460:	3301      	adds	r3, #1
 8001462:	e7f1      	b.n	8001448 <_write+0x8>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001464:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001466:	6820      	ldr	r0, [r4, #0]
 8001468:	2800      	cmp	r0, #0
 800146a:	d0fb      	beq.n	8001464 <_write+0x24>
		ITM_SendChar(*ptr++);
 800146c:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800146e:	7020      	strb	r0, [r4, #0]
 8001470:	e7f6      	b.n	8001460 <_write+0x20>

08001472 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001472:	e7fe      	b.n	8001472 <_Error_Handler>

08001474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001476:	2003      	movs	r0, #3
 8001478:	f7ff f8ee 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	4611      	mov	r1, r2
 8001480:	f06f 000b 	mvn.w	r0, #11
 8001484:	f7ff f8fa 	bl	800067c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	4611      	mov	r1, r2
 800148c:	f06f 000a 	mvn.w	r0, #10
 8001490:	f7ff f8f4 	bl	800067c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	4611      	mov	r1, r2
 8001498:	f06f 0009 	mvn.w	r0, #9
 800149c:	f7ff f8ee 	bl	800067c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	4611      	mov	r1, r2
 80014a4:	f06f 0004 	mvn.w	r0, #4
 80014a8:	f7ff f8e8 	bl	800067c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	4611      	mov	r1, r2
 80014b0:	f06f 0003 	mvn.w	r0, #3
 80014b4:	f7ff f8e2 	bl	800067c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	4611      	mov	r1, r2
 80014bc:	f06f 0001 	mvn.w	r0, #1
 80014c0:	f7ff f8dc 	bl	800067c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	4611      	mov	r1, r2
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014d0:	f7ff b8d4 	b.w	800067c <HAL_NVIC_SetPriority>

080014d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80014d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  static uint8_t counter = 0;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f7ff f899 	bl	800060c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80014da:	f7ff f932 	bl	8000742 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(counter >= 100)
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <SysTick_Handler+0x28>)
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	2a63      	cmp	r2, #99	; 0x63
 80014e4:	d905      	bls.n	80014f2 <SysTick_Handler+0x1e>
  {
	  MyGlobalVariable++;
 80014e6:	4906      	ldr	r1, [pc, #24]	; (8001500 <SysTick_Handler+0x2c>)
 80014e8:	680a      	ldr	r2, [r1, #0]
 80014ea:	3201      	adds	r2, #1
 80014ec:	600a      	str	r2, [r1, #0]
	  counter = 0;
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
  }
  counter++;
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	3201      	adds	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	bd08      	pop	{r3, pc}
 80014fa:	bf00      	nop
 80014fc:	20000092 	.word	0x20000092
 8001500:	2000008c 	.word	0x2000008c

08001504 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001504:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001508:	f7ff ba00 	b.w	800090c <HAL_GPIO_EXTI_IRQHandler>

0800150c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	490f      	ldr	r1, [pc, #60]	; (800154c <SystemInit+0x40>)
 800150e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001512:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <SystemInit+0x44>)
 800151c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800151e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001526:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800152e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001532:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <SystemInit+0x48>)
 8001536:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800153e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001540:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001542:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001546:	608b      	str	r3, [r1, #8]
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00
 8001550:	40023800 	.word	0x40023800
 8001554:	24003010 	.word	0x24003010

08001558 <MX_TIM10_Init>:

/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <MX_TIM10_Init+0x28>)
{
 800155a:	b508      	push	{r3, lr}
  htim10.Instance = TIM10;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_TIM10_Init+0x2c>)
 800155e:	6003      	str	r3, [r0, #0]
  htim10.Init.Prescaler = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	6043      	str	r3, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 0;
 8001566:	60c3      	str	r3, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800156a:	f7ff fc97 	bl	8000e9c <HAL_TIM_Base_Init>
 800156e:	b128      	cbz	r0, 800157c <MX_TIM10_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001570:	213c      	movs	r1, #60	; 0x3c
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_TIM10_Init+0x30>)
  }

}
 8001574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001578:	f7ff bf7b 	b.w	8001472 <_Error_Handler>
 800157c:	bd08      	pop	{r3, pc}
 800157e:	bf00      	nop
 8001580:	200000a4 	.word	0x200000a4
 8001584:	40014400 	.word	0x40014400
 8001588:	080025e4 	.word	0x080025e4

0800158c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM10)
 800158c:	6802      	ldr	r2, [r0, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_TIM_Base_MspInit+0x28>)
 8001590:	429a      	cmp	r2, r3
{
 8001592:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM10)
 8001594:	d10b      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_TIM_Base_MspInit+0x2c>)
 800159c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800159e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80015ae:	b002      	add	sp, #8
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40014400 	.word	0x40014400
 80015b8:	40023800 	.word	0x40023800

080015bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015bc:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART2_UART_Init+0x38>)
 80015c2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80015c6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ca:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015cc:	2300      	movs	r3, #0
 80015ce:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d0:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d2:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015da:	f7ff fdbb 	bl	8001154 <HAL_UART_Init>
 80015de:	b128      	cbz	r0, 80015ec <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 80015e0:	2142      	movs	r1, #66	; 0x42
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_USART2_UART_Init+0x3c>)
  }

}
 80015e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80015e8:	f7ff bf43 	b.w	8001472 <_Error_Handler>
 80015ec:	bd08      	pop	{r3, pc}
 80015ee:	bf00      	nop
 80015f0:	200000e0 	.word	0x200000e0
 80015f4:	40004400 	.word	0x40004400
 80015f8:	080025f1 	.word	0x080025f1

080015fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80015fe:	6802      	ldr	r2, [r0, #0]
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_UART_MspInit+0x40>)
 8001602:	429a      	cmp	r2, r3
 8001604:	d117      	bne.n	8001636 <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_UART_MspInit+0x44>)
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001610:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001614:	6411      	str	r1, [r2, #64]	; 0x40
 8001616:	6c12      	ldr	r2, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	9303      	str	r3, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800161a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001624:	220c      	movs	r2, #12
 8001626:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001628:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001630:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f7ff f88b 	bl	800074c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001636:	b007      	add	sp, #28
 8001638:	f85d fb04 	ldr.w	pc, [sp], #4
 800163c:	40004400 	.word	0x40004400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800164c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800164e:	e003      	b.n	8001658 <LoopCopyDataInit>

08001650 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001652:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001654:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001656:	3104      	adds	r1, #4

08001658 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800165c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800165e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001660:	d3f6      	bcc.n	8001650 <CopyDataInit>
  ldr  r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001664:	e002      	b.n	800166c <LoopFillZerobss>

08001666 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001666:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001668:	f842 3b04 	str.w	r3, [r2], #4

0800166c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800166e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001670:	d3f9      	bcc.n	8001666 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001672:	f7ff ff4b 	bl	800150c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f000 f811 	bl	800169c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fea5 	bl	80013c8 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001680:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001684:	080026a8 	.word	0x080026a8
  ldr  r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800168c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001690:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001694:	20000124 	.word	0x20000124

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <__libc_init_array>:
 800169c:	b570      	push	{r4, r5, r6, lr}
 800169e:	4e0d      	ldr	r6, [pc, #52]	; (80016d4 <__libc_init_array+0x38>)
 80016a0:	4c0d      	ldr	r4, [pc, #52]	; (80016d8 <__libc_init_array+0x3c>)
 80016a2:	1ba4      	subs	r4, r4, r6
 80016a4:	10a4      	asrs	r4, r4, #2
 80016a6:	2500      	movs	r5, #0
 80016a8:	42a5      	cmp	r5, r4
 80016aa:	d109      	bne.n	80016c0 <__libc_init_array+0x24>
 80016ac:	4e0b      	ldr	r6, [pc, #44]	; (80016dc <__libc_init_array+0x40>)
 80016ae:	4c0c      	ldr	r4, [pc, #48]	; (80016e0 <__libc_init_array+0x44>)
 80016b0:	f000 ff4e 	bl	8002550 <_init>
 80016b4:	1ba4      	subs	r4, r4, r6
 80016b6:	10a4      	asrs	r4, r4, #2
 80016b8:	2500      	movs	r5, #0
 80016ba:	42a5      	cmp	r5, r4
 80016bc:	d105      	bne.n	80016ca <__libc_init_array+0x2e>
 80016be:	bd70      	pop	{r4, r5, r6, pc}
 80016c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016c4:	4798      	blx	r3
 80016c6:	3501      	adds	r5, #1
 80016c8:	e7ee      	b.n	80016a8 <__libc_init_array+0xc>
 80016ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016ce:	4798      	blx	r3
 80016d0:	3501      	adds	r5, #1
 80016d2:	e7f2      	b.n	80016ba <__libc_init_array+0x1e>
 80016d4:	080026a0 	.word	0x080026a0
 80016d8:	080026a0 	.word	0x080026a0
 80016dc:	080026a0 	.word	0x080026a0
 80016e0:	080026a4 	.word	0x080026a4

080016e4 <iprintf>:
 80016e4:	b40f      	push	{r0, r1, r2, r3}
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <iprintf+0x2c>)
 80016e8:	b513      	push	{r0, r1, r4, lr}
 80016ea:	681c      	ldr	r4, [r3, #0]
 80016ec:	b124      	cbz	r4, 80016f8 <iprintf+0x14>
 80016ee:	69a3      	ldr	r3, [r4, #24]
 80016f0:	b913      	cbnz	r3, 80016f8 <iprintf+0x14>
 80016f2:	4620      	mov	r0, r4
 80016f4:	f000 f84e 	bl	8001794 <__sinit>
 80016f8:	ab05      	add	r3, sp, #20
 80016fa:	9a04      	ldr	r2, [sp, #16]
 80016fc:	68a1      	ldr	r1, [r4, #8]
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	4620      	mov	r0, r4
 8001702:	f000 f961 	bl	80019c8 <_vfiprintf_r>
 8001706:	b002      	add	sp, #8
 8001708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800170c:	b004      	add	sp, #16
 800170e:	4770      	bx	lr
 8001710:	2000000c 	.word	0x2000000c

08001714 <_cleanup_r>:
 8001714:	4901      	ldr	r1, [pc, #4]	; (800171c <_cleanup_r+0x8>)
 8001716:	f000 b8a9 	b.w	800186c <_fwalk_reent>
 800171a:	bf00      	nop
 800171c:	0800229d 	.word	0x0800229d

08001720 <std.isra.0>:
 8001720:	2300      	movs	r3, #0
 8001722:	b510      	push	{r4, lr}
 8001724:	4604      	mov	r4, r0
 8001726:	6003      	str	r3, [r0, #0]
 8001728:	6043      	str	r3, [r0, #4]
 800172a:	6083      	str	r3, [r0, #8]
 800172c:	8181      	strh	r1, [r0, #12]
 800172e:	6643      	str	r3, [r0, #100]	; 0x64
 8001730:	81c2      	strh	r2, [r0, #14]
 8001732:	6103      	str	r3, [r0, #16]
 8001734:	6143      	str	r3, [r0, #20]
 8001736:	6183      	str	r3, [r0, #24]
 8001738:	4619      	mov	r1, r3
 800173a:	2208      	movs	r2, #8
 800173c:	305c      	adds	r0, #92	; 0x5c
 800173e:	f000 f8b3 	bl	80018a8 <memset>
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <std.isra.0+0x38>)
 8001744:	6263      	str	r3, [r4, #36]	; 0x24
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <std.isra.0+0x3c>)
 8001748:	62a3      	str	r3, [r4, #40]	; 0x28
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <std.isra.0+0x40>)
 800174c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <std.isra.0+0x44>)
 8001750:	6224      	str	r4, [r4, #32]
 8001752:	6323      	str	r3, [r4, #48]	; 0x30
 8001754:	bd10      	pop	{r4, pc}
 8001756:	bf00      	nop
 8001758:	08001f41 	.word	0x08001f41
 800175c:	08001f63 	.word	0x08001f63
 8001760:	08001f9b 	.word	0x08001f9b
 8001764:	08001fbf 	.word	0x08001fbf

08001768 <__sfmoreglue>:
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	1e4a      	subs	r2, r1, #1
 800176c:	2568      	movs	r5, #104	; 0x68
 800176e:	4355      	muls	r5, r2
 8001770:	460e      	mov	r6, r1
 8001772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001776:	f000 f89f 	bl	80018b8 <_malloc_r>
 800177a:	4604      	mov	r4, r0
 800177c:	b140      	cbz	r0, 8001790 <__sfmoreglue+0x28>
 800177e:	2100      	movs	r1, #0
 8001780:	e880 0042 	stmia.w	r0, {r1, r6}
 8001784:	300c      	adds	r0, #12
 8001786:	60a0      	str	r0, [r4, #8]
 8001788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800178c:	f000 f88c 	bl	80018a8 <memset>
 8001790:	4620      	mov	r0, r4
 8001792:	bd70      	pop	{r4, r5, r6, pc}

08001794 <__sinit>:
 8001794:	6983      	ldr	r3, [r0, #24]
 8001796:	b510      	push	{r4, lr}
 8001798:	4604      	mov	r4, r0
 800179a:	bb33      	cbnz	r3, 80017ea <__sinit+0x56>
 800179c:	6483      	str	r3, [r0, #72]	; 0x48
 800179e:	64c3      	str	r3, [r0, #76]	; 0x4c
 80017a0:	6503      	str	r3, [r0, #80]	; 0x50
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <__sinit+0x58>)
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <__sinit+0x5c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6282      	str	r2, [r0, #40]	; 0x28
 80017aa:	4298      	cmp	r0, r3
 80017ac:	bf04      	itt	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	6183      	streq	r3, [r0, #24]
 80017b2:	f000 f81f 	bl	80017f4 <__sfp>
 80017b6:	6060      	str	r0, [r4, #4]
 80017b8:	4620      	mov	r0, r4
 80017ba:	f000 f81b 	bl	80017f4 <__sfp>
 80017be:	60a0      	str	r0, [r4, #8]
 80017c0:	4620      	mov	r0, r4
 80017c2:	f000 f817 	bl	80017f4 <__sfp>
 80017c6:	2200      	movs	r2, #0
 80017c8:	60e0      	str	r0, [r4, #12]
 80017ca:	2104      	movs	r1, #4
 80017cc:	6860      	ldr	r0, [r4, #4]
 80017ce:	f7ff ffa7 	bl	8001720 <std.isra.0>
 80017d2:	2201      	movs	r2, #1
 80017d4:	2109      	movs	r1, #9
 80017d6:	68a0      	ldr	r0, [r4, #8]
 80017d8:	f7ff ffa2 	bl	8001720 <std.isra.0>
 80017dc:	2202      	movs	r2, #2
 80017de:	2112      	movs	r1, #18
 80017e0:	68e0      	ldr	r0, [r4, #12]
 80017e2:	f7ff ff9d 	bl	8001720 <std.isra.0>
 80017e6:	2301      	movs	r3, #1
 80017e8:	61a3      	str	r3, [r4, #24]
 80017ea:	bd10      	pop	{r4, pc}
 80017ec:	08002660 	.word	0x08002660
 80017f0:	08001715 	.word	0x08001715

080017f4 <__sfp>:
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <__sfp+0x74>)
 80017f8:	681e      	ldr	r6, [r3, #0]
 80017fa:	69b3      	ldr	r3, [r6, #24]
 80017fc:	4607      	mov	r7, r0
 80017fe:	b913      	cbnz	r3, 8001806 <__sfp+0x12>
 8001800:	4630      	mov	r0, r6
 8001802:	f7ff ffc7 	bl	8001794 <__sinit>
 8001806:	3648      	adds	r6, #72	; 0x48
 8001808:	68b4      	ldr	r4, [r6, #8]
 800180a:	6873      	ldr	r3, [r6, #4]
 800180c:	3b01      	subs	r3, #1
 800180e:	d503      	bpl.n	8001818 <__sfp+0x24>
 8001810:	6833      	ldr	r3, [r6, #0]
 8001812:	b133      	cbz	r3, 8001822 <__sfp+0x2e>
 8001814:	6836      	ldr	r6, [r6, #0]
 8001816:	e7f7      	b.n	8001808 <__sfp+0x14>
 8001818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800181c:	b16d      	cbz	r5, 800183a <__sfp+0x46>
 800181e:	3468      	adds	r4, #104	; 0x68
 8001820:	e7f4      	b.n	800180c <__sfp+0x18>
 8001822:	2104      	movs	r1, #4
 8001824:	4638      	mov	r0, r7
 8001826:	f7ff ff9f 	bl	8001768 <__sfmoreglue>
 800182a:	6030      	str	r0, [r6, #0]
 800182c:	2800      	cmp	r0, #0
 800182e:	d1f1      	bne.n	8001814 <__sfp+0x20>
 8001830:	230c      	movs	r3, #12
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	4604      	mov	r4, r0
 8001836:	4620      	mov	r0, r4
 8001838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800183a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800183e:	81e3      	strh	r3, [r4, #14]
 8001840:	2301      	movs	r3, #1
 8001842:	81a3      	strh	r3, [r4, #12]
 8001844:	6665      	str	r5, [r4, #100]	; 0x64
 8001846:	6025      	str	r5, [r4, #0]
 8001848:	60a5      	str	r5, [r4, #8]
 800184a:	6065      	str	r5, [r4, #4]
 800184c:	6125      	str	r5, [r4, #16]
 800184e:	6165      	str	r5, [r4, #20]
 8001850:	61a5      	str	r5, [r4, #24]
 8001852:	2208      	movs	r2, #8
 8001854:	4629      	mov	r1, r5
 8001856:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800185a:	f000 f825 	bl	80018a8 <memset>
 800185e:	6365      	str	r5, [r4, #52]	; 0x34
 8001860:	63a5      	str	r5, [r4, #56]	; 0x38
 8001862:	64a5      	str	r5, [r4, #72]	; 0x48
 8001864:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001866:	e7e6      	b.n	8001836 <__sfp+0x42>
 8001868:	08002660 	.word	0x08002660

0800186c <_fwalk_reent>:
 800186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001870:	4680      	mov	r8, r0
 8001872:	4689      	mov	r9, r1
 8001874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001878:	2600      	movs	r6, #0
 800187a:	b914      	cbnz	r4, 8001882 <_fwalk_reent+0x16>
 800187c:	4630      	mov	r0, r6
 800187e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001882:	68a5      	ldr	r5, [r4, #8]
 8001884:	6867      	ldr	r7, [r4, #4]
 8001886:	3f01      	subs	r7, #1
 8001888:	d501      	bpl.n	800188e <_fwalk_reent+0x22>
 800188a:	6824      	ldr	r4, [r4, #0]
 800188c:	e7f5      	b.n	800187a <_fwalk_reent+0xe>
 800188e:	89ab      	ldrh	r3, [r5, #12]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d907      	bls.n	80018a4 <_fwalk_reent+0x38>
 8001894:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001898:	3301      	adds	r3, #1
 800189a:	d003      	beq.n	80018a4 <_fwalk_reent+0x38>
 800189c:	4629      	mov	r1, r5
 800189e:	4640      	mov	r0, r8
 80018a0:	47c8      	blx	r9
 80018a2:	4306      	orrs	r6, r0
 80018a4:	3568      	adds	r5, #104	; 0x68
 80018a6:	e7ee      	b.n	8001886 <_fwalk_reent+0x1a>

080018a8 <memset>:
 80018a8:	4402      	add	r2, r0
 80018aa:	4603      	mov	r3, r0
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d100      	bne.n	80018b2 <memset+0xa>
 80018b0:	4770      	bx	lr
 80018b2:	f803 1b01 	strb.w	r1, [r3], #1
 80018b6:	e7f9      	b.n	80018ac <memset+0x4>

080018b8 <_malloc_r>:
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	1ccd      	adds	r5, r1, #3
 80018bc:	f025 0503 	bic.w	r5, r5, #3
 80018c0:	3508      	adds	r5, #8
 80018c2:	2d0c      	cmp	r5, #12
 80018c4:	bf38      	it	cc
 80018c6:	250c      	movcc	r5, #12
 80018c8:	2d00      	cmp	r5, #0
 80018ca:	4606      	mov	r6, r0
 80018cc:	db01      	blt.n	80018d2 <_malloc_r+0x1a>
 80018ce:	42a9      	cmp	r1, r5
 80018d0:	d903      	bls.n	80018da <_malloc_r+0x22>
 80018d2:	230c      	movs	r3, #12
 80018d4:	6033      	str	r3, [r6, #0]
 80018d6:	2000      	movs	r0, #0
 80018d8:	bd70      	pop	{r4, r5, r6, pc}
 80018da:	f000 fd7f 	bl	80023dc <__malloc_lock>
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <_malloc_r+0xb4>)
 80018e0:	6814      	ldr	r4, [r2, #0]
 80018e2:	4621      	mov	r1, r4
 80018e4:	b991      	cbnz	r1, 800190c <_malloc_r+0x54>
 80018e6:	4c22      	ldr	r4, [pc, #136]	; (8001970 <_malloc_r+0xb8>)
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	b91b      	cbnz	r3, 80018f4 <_malloc_r+0x3c>
 80018ec:	4630      	mov	r0, r6
 80018ee:	f000 fb17 	bl	8001f20 <_sbrk_r>
 80018f2:	6020      	str	r0, [r4, #0]
 80018f4:	4629      	mov	r1, r5
 80018f6:	4630      	mov	r0, r6
 80018f8:	f000 fb12 	bl	8001f20 <_sbrk_r>
 80018fc:	1c43      	adds	r3, r0, #1
 80018fe:	d126      	bne.n	800194e <_malloc_r+0x96>
 8001900:	230c      	movs	r3, #12
 8001902:	6033      	str	r3, [r6, #0]
 8001904:	4630      	mov	r0, r6
 8001906:	f000 fd6a 	bl	80023de <__malloc_unlock>
 800190a:	e7e4      	b.n	80018d6 <_malloc_r+0x1e>
 800190c:	680b      	ldr	r3, [r1, #0]
 800190e:	1b5b      	subs	r3, r3, r5
 8001910:	d41a      	bmi.n	8001948 <_malloc_r+0x90>
 8001912:	2b0b      	cmp	r3, #11
 8001914:	d90f      	bls.n	8001936 <_malloc_r+0x7e>
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	50cd      	str	r5, [r1, r3]
 800191a:	18cc      	adds	r4, r1, r3
 800191c:	4630      	mov	r0, r6
 800191e:	f000 fd5e 	bl	80023de <__malloc_unlock>
 8001922:	f104 000b 	add.w	r0, r4, #11
 8001926:	1d23      	adds	r3, r4, #4
 8001928:	f020 0007 	bic.w	r0, r0, #7
 800192c:	1ac3      	subs	r3, r0, r3
 800192e:	d01b      	beq.n	8001968 <_malloc_r+0xb0>
 8001930:	425a      	negs	r2, r3
 8001932:	50e2      	str	r2, [r4, r3]
 8001934:	bd70      	pop	{r4, r5, r6, pc}
 8001936:	428c      	cmp	r4, r1
 8001938:	bf0d      	iteet	eq
 800193a:	6863      	ldreq	r3, [r4, #4]
 800193c:	684b      	ldrne	r3, [r1, #4]
 800193e:	6063      	strne	r3, [r4, #4]
 8001940:	6013      	streq	r3, [r2, #0]
 8001942:	bf18      	it	ne
 8001944:	460c      	movne	r4, r1
 8001946:	e7e9      	b.n	800191c <_malloc_r+0x64>
 8001948:	460c      	mov	r4, r1
 800194a:	6849      	ldr	r1, [r1, #4]
 800194c:	e7ca      	b.n	80018e4 <_malloc_r+0x2c>
 800194e:	1cc4      	adds	r4, r0, #3
 8001950:	f024 0403 	bic.w	r4, r4, #3
 8001954:	42a0      	cmp	r0, r4
 8001956:	d005      	beq.n	8001964 <_malloc_r+0xac>
 8001958:	1a21      	subs	r1, r4, r0
 800195a:	4630      	mov	r0, r6
 800195c:	f000 fae0 	bl	8001f20 <_sbrk_r>
 8001960:	3001      	adds	r0, #1
 8001962:	d0cd      	beq.n	8001900 <_malloc_r+0x48>
 8001964:	6025      	str	r5, [r4, #0]
 8001966:	e7d9      	b.n	800191c <_malloc_r+0x64>
 8001968:	bd70      	pop	{r4, r5, r6, pc}
 800196a:	bf00      	nop
 800196c:	20000094 	.word	0x20000094
 8001970:	20000098 	.word	0x20000098

08001974 <__sfputc_r>:
 8001974:	6893      	ldr	r3, [r2, #8]
 8001976:	3b01      	subs	r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	b410      	push	{r4}
 800197c:	6093      	str	r3, [r2, #8]
 800197e:	da09      	bge.n	8001994 <__sfputc_r+0x20>
 8001980:	6994      	ldr	r4, [r2, #24]
 8001982:	42a3      	cmp	r3, r4
 8001984:	db02      	blt.n	800198c <__sfputc_r+0x18>
 8001986:	b2cb      	uxtb	r3, r1
 8001988:	2b0a      	cmp	r3, #10
 800198a:	d103      	bne.n	8001994 <__sfputc_r+0x20>
 800198c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001990:	f000 bb1a 	b.w	8001fc8 <__swbuf_r>
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	1c58      	adds	r0, r3, #1
 8001998:	6010      	str	r0, [r2, #0]
 800199a:	7019      	strb	r1, [r3, #0]
 800199c:	b2c8      	uxtb	r0, r1
 800199e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <__sfputs_r>:
 80019a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a6:	4606      	mov	r6, r0
 80019a8:	460f      	mov	r7, r1
 80019aa:	4614      	mov	r4, r2
 80019ac:	18d5      	adds	r5, r2, r3
 80019ae:	42ac      	cmp	r4, r5
 80019b0:	d101      	bne.n	80019b6 <__sfputs_r+0x12>
 80019b2:	2000      	movs	r0, #0
 80019b4:	e007      	b.n	80019c6 <__sfputs_r+0x22>
 80019b6:	463a      	mov	r2, r7
 80019b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019bc:	4630      	mov	r0, r6
 80019be:	f7ff ffd9 	bl	8001974 <__sfputc_r>
 80019c2:	1c43      	adds	r3, r0, #1
 80019c4:	d1f3      	bne.n	80019ae <__sfputs_r+0xa>
 80019c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019c8 <_vfiprintf_r>:
 80019c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019cc:	b09d      	sub	sp, #116	; 0x74
 80019ce:	460c      	mov	r4, r1
 80019d0:	4617      	mov	r7, r2
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	4606      	mov	r6, r0
 80019d6:	b118      	cbz	r0, 80019e0 <_vfiprintf_r+0x18>
 80019d8:	6983      	ldr	r3, [r0, #24]
 80019da:	b90b      	cbnz	r3, 80019e0 <_vfiprintf_r+0x18>
 80019dc:	f7ff feda 	bl	8001794 <__sinit>
 80019e0:	4b7c      	ldr	r3, [pc, #496]	; (8001bd4 <_vfiprintf_r+0x20c>)
 80019e2:	429c      	cmp	r4, r3
 80019e4:	d157      	bne.n	8001a96 <_vfiprintf_r+0xce>
 80019e6:	6874      	ldr	r4, [r6, #4]
 80019e8:	89a3      	ldrh	r3, [r4, #12]
 80019ea:	0718      	lsls	r0, r3, #28
 80019ec:	d55d      	bpl.n	8001aaa <_vfiprintf_r+0xe2>
 80019ee:	6923      	ldr	r3, [r4, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d05a      	beq.n	8001aaa <_vfiprintf_r+0xe2>
 80019f4:	2300      	movs	r3, #0
 80019f6:	9309      	str	r3, [sp, #36]	; 0x24
 80019f8:	2320      	movs	r3, #32
 80019fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019fe:	2330      	movs	r3, #48	; 0x30
 8001a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a04:	f04f 0b01 	mov.w	fp, #1
 8001a08:	46b8      	mov	r8, r7
 8001a0a:	4645      	mov	r5, r8
 8001a0c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d155      	bne.n	8001ac0 <_vfiprintf_r+0xf8>
 8001a14:	ebb8 0a07 	subs.w	sl, r8, r7
 8001a18:	d00b      	beq.n	8001a32 <_vfiprintf_r+0x6a>
 8001a1a:	4653      	mov	r3, sl
 8001a1c:	463a      	mov	r2, r7
 8001a1e:	4621      	mov	r1, r4
 8001a20:	4630      	mov	r0, r6
 8001a22:	f7ff ffbf 	bl	80019a4 <__sfputs_r>
 8001a26:	3001      	adds	r0, #1
 8001a28:	f000 80c4 	beq.w	8001bb4 <_vfiprintf_r+0x1ec>
 8001a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a2e:	4453      	add	r3, sl
 8001a30:	9309      	str	r3, [sp, #36]	; 0x24
 8001a32:	f898 3000 	ldrb.w	r3, [r8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80bc 	beq.w	8001bb4 <_vfiprintf_r+0x1ec>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a42:	9304      	str	r3, [sp, #16]
 8001a44:	9307      	str	r3, [sp, #28]
 8001a46:	9205      	str	r2, [sp, #20]
 8001a48:	9306      	str	r3, [sp, #24]
 8001a4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a4e:	931a      	str	r3, [sp, #104]	; 0x68
 8001a50:	2205      	movs	r2, #5
 8001a52:	7829      	ldrb	r1, [r5, #0]
 8001a54:	4860      	ldr	r0, [pc, #384]	; (8001bd8 <_vfiprintf_r+0x210>)
 8001a56:	f7fe fbc3 	bl	80001e0 <memchr>
 8001a5a:	f105 0801 	add.w	r8, r5, #1
 8001a5e:	9b04      	ldr	r3, [sp, #16]
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d131      	bne.n	8001ac8 <_vfiprintf_r+0x100>
 8001a64:	06d9      	lsls	r1, r3, #27
 8001a66:	bf44      	itt	mi
 8001a68:	2220      	movmi	r2, #32
 8001a6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a6e:	071a      	lsls	r2, r3, #28
 8001a70:	bf44      	itt	mi
 8001a72:	222b      	movmi	r2, #43	; 0x2b
 8001a74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a78:	782a      	ldrb	r2, [r5, #0]
 8001a7a:	2a2a      	cmp	r2, #42	; 0x2a
 8001a7c:	d02c      	beq.n	8001ad8 <_vfiprintf_r+0x110>
 8001a7e:	9a07      	ldr	r2, [sp, #28]
 8001a80:	2100      	movs	r1, #0
 8001a82:	200a      	movs	r0, #10
 8001a84:	46a8      	mov	r8, r5
 8001a86:	3501      	adds	r5, #1
 8001a88:	f898 3000 	ldrb.w	r3, [r8]
 8001a8c:	3b30      	subs	r3, #48	; 0x30
 8001a8e:	2b09      	cmp	r3, #9
 8001a90:	d96d      	bls.n	8001b6e <_vfiprintf_r+0x1a6>
 8001a92:	b371      	cbz	r1, 8001af2 <_vfiprintf_r+0x12a>
 8001a94:	e026      	b.n	8001ae4 <_vfiprintf_r+0x11c>
 8001a96:	4b51      	ldr	r3, [pc, #324]	; (8001bdc <_vfiprintf_r+0x214>)
 8001a98:	429c      	cmp	r4, r3
 8001a9a:	d101      	bne.n	8001aa0 <_vfiprintf_r+0xd8>
 8001a9c:	68b4      	ldr	r4, [r6, #8]
 8001a9e:	e7a3      	b.n	80019e8 <_vfiprintf_r+0x20>
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <_vfiprintf_r+0x218>)
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	bf08      	it	eq
 8001aa6:	68f4      	ldreq	r4, [r6, #12]
 8001aa8:	e79e      	b.n	80019e8 <_vfiprintf_r+0x20>
 8001aaa:	4621      	mov	r1, r4
 8001aac:	4630      	mov	r0, r6
 8001aae:	f000 faef 	bl	8002090 <__swsetup_r>
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	d09e      	beq.n	80019f4 <_vfiprintf_r+0x2c>
 8001ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aba:	b01d      	add	sp, #116	; 0x74
 8001abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ac0:	2b25      	cmp	r3, #37	; 0x25
 8001ac2:	d0a7      	beq.n	8001a14 <_vfiprintf_r+0x4c>
 8001ac4:	46a8      	mov	r8, r5
 8001ac6:	e7a0      	b.n	8001a0a <_vfiprintf_r+0x42>
 8001ac8:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <_vfiprintf_r+0x210>)
 8001aca:	1a80      	subs	r0, r0, r2
 8001acc:	fa0b f000 	lsl.w	r0, fp, r0
 8001ad0:	4318      	orrs	r0, r3
 8001ad2:	9004      	str	r0, [sp, #16]
 8001ad4:	4645      	mov	r5, r8
 8001ad6:	e7bb      	b.n	8001a50 <_vfiprintf_r+0x88>
 8001ad8:	9a03      	ldr	r2, [sp, #12]
 8001ada:	1d11      	adds	r1, r2, #4
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	9103      	str	r1, [sp, #12]
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	db01      	blt.n	8001ae8 <_vfiprintf_r+0x120>
 8001ae4:	9207      	str	r2, [sp, #28]
 8001ae6:	e004      	b.n	8001af2 <_vfiprintf_r+0x12a>
 8001ae8:	4252      	negs	r2, r2
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	9207      	str	r2, [sp, #28]
 8001af0:	9304      	str	r3, [sp, #16]
 8001af2:	f898 3000 	ldrb.w	r3, [r8]
 8001af6:	2b2e      	cmp	r3, #46	; 0x2e
 8001af8:	d110      	bne.n	8001b1c <_vfiprintf_r+0x154>
 8001afa:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001afe:	2b2a      	cmp	r3, #42	; 0x2a
 8001b00:	f108 0101 	add.w	r1, r8, #1
 8001b04:	d137      	bne.n	8001b76 <_vfiprintf_r+0x1ae>
 8001b06:	9b03      	ldr	r3, [sp, #12]
 8001b08:	1d1a      	adds	r2, r3, #4
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	9203      	str	r2, [sp, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bfb8      	it	lt
 8001b12:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b16:	f108 0802 	add.w	r8, r8, #2
 8001b1a:	9305      	str	r3, [sp, #20]
 8001b1c:	4d31      	ldr	r5, [pc, #196]	; (8001be4 <_vfiprintf_r+0x21c>)
 8001b1e:	f898 1000 	ldrb.w	r1, [r8]
 8001b22:	2203      	movs	r2, #3
 8001b24:	4628      	mov	r0, r5
 8001b26:	f7fe fb5b 	bl	80001e0 <memchr>
 8001b2a:	b140      	cbz	r0, 8001b3e <_vfiprintf_r+0x176>
 8001b2c:	2340      	movs	r3, #64	; 0x40
 8001b2e:	1b40      	subs	r0, r0, r5
 8001b30:	fa03 f000 	lsl.w	r0, r3, r0
 8001b34:	9b04      	ldr	r3, [sp, #16]
 8001b36:	4303      	orrs	r3, r0
 8001b38:	9304      	str	r3, [sp, #16]
 8001b3a:	f108 0801 	add.w	r8, r8, #1
 8001b3e:	f898 1000 	ldrb.w	r1, [r8]
 8001b42:	4829      	ldr	r0, [pc, #164]	; (8001be8 <_vfiprintf_r+0x220>)
 8001b44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b48:	2206      	movs	r2, #6
 8001b4a:	f108 0701 	add.w	r7, r8, #1
 8001b4e:	f7fe fb47 	bl	80001e0 <memchr>
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d034      	beq.n	8001bc0 <_vfiprintf_r+0x1f8>
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <_vfiprintf_r+0x224>)
 8001b58:	bb03      	cbnz	r3, 8001b9c <_vfiprintf_r+0x1d4>
 8001b5a:	9b03      	ldr	r3, [sp, #12]
 8001b5c:	3307      	adds	r3, #7
 8001b5e:	f023 0307 	bic.w	r3, r3, #7
 8001b62:	3308      	adds	r3, #8
 8001b64:	9303      	str	r3, [sp, #12]
 8001b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b68:	444b      	add	r3, r9
 8001b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b6c:	e74c      	b.n	8001a08 <_vfiprintf_r+0x40>
 8001b6e:	fb00 3202 	mla	r2, r0, r2, r3
 8001b72:	2101      	movs	r1, #1
 8001b74:	e786      	b.n	8001a84 <_vfiprintf_r+0xbc>
 8001b76:	2300      	movs	r3, #0
 8001b78:	9305      	str	r3, [sp, #20]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	250a      	movs	r5, #10
 8001b7e:	4688      	mov	r8, r1
 8001b80:	3101      	adds	r1, #1
 8001b82:	f898 2000 	ldrb.w	r2, [r8]
 8001b86:	3a30      	subs	r2, #48	; 0x30
 8001b88:	2a09      	cmp	r2, #9
 8001b8a:	d903      	bls.n	8001b94 <_vfiprintf_r+0x1cc>
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0c5      	beq.n	8001b1c <_vfiprintf_r+0x154>
 8001b90:	9005      	str	r0, [sp, #20]
 8001b92:	e7c3      	b.n	8001b1c <_vfiprintf_r+0x154>
 8001b94:	fb05 2000 	mla	r0, r5, r0, r2
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e7f0      	b.n	8001b7e <_vfiprintf_r+0x1b6>
 8001b9c:	ab03      	add	r3, sp, #12
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <_vfiprintf_r+0x228>)
 8001ba4:	a904      	add	r1, sp, #16
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	f3af 8000 	nop.w
 8001bac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001bb0:	4681      	mov	r9, r0
 8001bb2:	d1d8      	bne.n	8001b66 <_vfiprintf_r+0x19e>
 8001bb4:	89a3      	ldrh	r3, [r4, #12]
 8001bb6:	065b      	lsls	r3, r3, #25
 8001bb8:	f53f af7d 	bmi.w	8001ab6 <_vfiprintf_r+0xee>
 8001bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bbe:	e77c      	b.n	8001aba <_vfiprintf_r+0xf2>
 8001bc0:	ab03      	add	r3, sp, #12
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <_vfiprintf_r+0x228>)
 8001bc8:	a904      	add	r1, sp, #16
 8001bca:	4630      	mov	r0, r6
 8001bcc:	f000 f888 	bl	8001ce0 <_printf_i>
 8001bd0:	e7ec      	b.n	8001bac <_vfiprintf_r+0x1e4>
 8001bd2:	bf00      	nop
 8001bd4:	08002620 	.word	0x08002620
 8001bd8:	08002664 	.word	0x08002664
 8001bdc:	08002640 	.word	0x08002640
 8001be0:	08002600 	.word	0x08002600
 8001be4:	0800266a 	.word	0x0800266a
 8001be8:	0800266e 	.word	0x0800266e
 8001bec:	00000000 	.word	0x00000000
 8001bf0:	080019a5 	.word	0x080019a5

08001bf4 <_printf_common>:
 8001bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf8:	4691      	mov	r9, r2
 8001bfa:	461f      	mov	r7, r3
 8001bfc:	688a      	ldr	r2, [r1, #8]
 8001bfe:	690b      	ldr	r3, [r1, #16]
 8001c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c04:	4293      	cmp	r3, r2
 8001c06:	bfb8      	it	lt
 8001c08:	4613      	movlt	r3, r2
 8001c0a:	f8c9 3000 	str.w	r3, [r9]
 8001c0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c12:	4606      	mov	r6, r0
 8001c14:	460c      	mov	r4, r1
 8001c16:	b112      	cbz	r2, 8001c1e <_printf_common+0x2a>
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f8c9 3000 	str.w	r3, [r9]
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	0699      	lsls	r1, r3, #26
 8001c22:	bf42      	ittt	mi
 8001c24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001c28:	3302      	addmi	r3, #2
 8001c2a:	f8c9 3000 	strmi.w	r3, [r9]
 8001c2e:	6825      	ldr	r5, [r4, #0]
 8001c30:	f015 0506 	ands.w	r5, r5, #6
 8001c34:	d107      	bne.n	8001c46 <_printf_common+0x52>
 8001c36:	f104 0a19 	add.w	sl, r4, #25
 8001c3a:	68e3      	ldr	r3, [r4, #12]
 8001c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	429d      	cmp	r5, r3
 8001c44:	db29      	blt.n	8001c9a <_printf_common+0xa6>
 8001c46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001c4a:	6822      	ldr	r2, [r4, #0]
 8001c4c:	3300      	adds	r3, #0
 8001c4e:	bf18      	it	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	0692      	lsls	r2, r2, #26
 8001c54:	d42e      	bmi.n	8001cb4 <_printf_common+0xc0>
 8001c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c5a:	4639      	mov	r1, r7
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	47c0      	blx	r8
 8001c60:	3001      	adds	r0, #1
 8001c62:	d021      	beq.n	8001ca8 <_printf_common+0xb4>
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	68e5      	ldr	r5, [r4, #12]
 8001c68:	f8d9 2000 	ldr.w	r2, [r9]
 8001c6c:	f003 0306 	and.w	r3, r3, #6
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	bf08      	it	eq
 8001c74:	1aad      	subeq	r5, r5, r2
 8001c76:	68a3      	ldr	r3, [r4, #8]
 8001c78:	6922      	ldr	r2, [r4, #16]
 8001c7a:	bf0c      	ite	eq
 8001c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c80:	2500      	movne	r5, #0
 8001c82:	4293      	cmp	r3, r2
 8001c84:	bfc4      	itt	gt
 8001c86:	1a9b      	subgt	r3, r3, r2
 8001c88:	18ed      	addgt	r5, r5, r3
 8001c8a:	f04f 0900 	mov.w	r9, #0
 8001c8e:	341a      	adds	r4, #26
 8001c90:	454d      	cmp	r5, r9
 8001c92:	d11b      	bne.n	8001ccc <_printf_common+0xd8>
 8001c94:	2000      	movs	r0, #0
 8001c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4652      	mov	r2, sl
 8001c9e:	4639      	mov	r1, r7
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	47c0      	blx	r8
 8001ca4:	3001      	adds	r0, #1
 8001ca6:	d103      	bne.n	8001cb0 <_printf_common+0xbc>
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb0:	3501      	adds	r5, #1
 8001cb2:	e7c2      	b.n	8001c3a <_printf_common+0x46>
 8001cb4:	18e1      	adds	r1, r4, r3
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	2030      	movs	r0, #48	; 0x30
 8001cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cbe:	4422      	add	r2, r4
 8001cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cc8:	3302      	adds	r3, #2
 8001cca:	e7c4      	b.n	8001c56 <_printf_common+0x62>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	4622      	mov	r2, r4
 8001cd0:	4639      	mov	r1, r7
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	47c0      	blx	r8
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	d0e6      	beq.n	8001ca8 <_printf_common+0xb4>
 8001cda:	f109 0901 	add.w	r9, r9, #1
 8001cde:	e7d7      	b.n	8001c90 <_printf_common+0x9c>

08001ce0 <_printf_i>:
 8001ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ce4:	4617      	mov	r7, r2
 8001ce6:	7e0a      	ldrb	r2, [r1, #24]
 8001ce8:	b085      	sub	sp, #20
 8001cea:	2a6e      	cmp	r2, #110	; 0x6e
 8001cec:	4698      	mov	r8, r3
 8001cee:	4606      	mov	r6, r0
 8001cf0:	460c      	mov	r4, r1
 8001cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001cf4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001cf8:	f000 80bc 	beq.w	8001e74 <_printf_i+0x194>
 8001cfc:	d81a      	bhi.n	8001d34 <_printf_i+0x54>
 8001cfe:	2a63      	cmp	r2, #99	; 0x63
 8001d00:	d02e      	beq.n	8001d60 <_printf_i+0x80>
 8001d02:	d80a      	bhi.n	8001d1a <_printf_i+0x3a>
 8001d04:	2a00      	cmp	r2, #0
 8001d06:	f000 80c8 	beq.w	8001e9a <_printf_i+0x1ba>
 8001d0a:	2a58      	cmp	r2, #88	; 0x58
 8001d0c:	f000 808a 	beq.w	8001e24 <_printf_i+0x144>
 8001d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001d18:	e02a      	b.n	8001d70 <_printf_i+0x90>
 8001d1a:	2a64      	cmp	r2, #100	; 0x64
 8001d1c:	d001      	beq.n	8001d22 <_printf_i+0x42>
 8001d1e:	2a69      	cmp	r2, #105	; 0x69
 8001d20:	d1f6      	bne.n	8001d10 <_printf_i+0x30>
 8001d22:	6821      	ldr	r1, [r4, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d2a:	d023      	beq.n	8001d74 <_printf_i+0x94>
 8001d2c:	1d11      	adds	r1, r2, #4
 8001d2e:	6019      	str	r1, [r3, #0]
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	e027      	b.n	8001d84 <_printf_i+0xa4>
 8001d34:	2a73      	cmp	r2, #115	; 0x73
 8001d36:	f000 80b4 	beq.w	8001ea2 <_printf_i+0x1c2>
 8001d3a:	d808      	bhi.n	8001d4e <_printf_i+0x6e>
 8001d3c:	2a6f      	cmp	r2, #111	; 0x6f
 8001d3e:	d02a      	beq.n	8001d96 <_printf_i+0xb6>
 8001d40:	2a70      	cmp	r2, #112	; 0x70
 8001d42:	d1e5      	bne.n	8001d10 <_printf_i+0x30>
 8001d44:	680a      	ldr	r2, [r1, #0]
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	600a      	str	r2, [r1, #0]
 8001d4c:	e003      	b.n	8001d56 <_printf_i+0x76>
 8001d4e:	2a75      	cmp	r2, #117	; 0x75
 8001d50:	d021      	beq.n	8001d96 <_printf_i+0xb6>
 8001d52:	2a78      	cmp	r2, #120	; 0x78
 8001d54:	d1dc      	bne.n	8001d10 <_printf_i+0x30>
 8001d56:	2278      	movs	r2, #120	; 0x78
 8001d58:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001d5c:	496e      	ldr	r1, [pc, #440]	; (8001f18 <_printf_i+0x238>)
 8001d5e:	e064      	b.n	8001e2a <_printf_i+0x14a>
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001d66:	1d11      	adds	r1, r2, #4
 8001d68:	6019      	str	r1, [r3, #0]
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0a3      	b.n	8001ebc <_printf_i+0x1dc>
 8001d74:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001d78:	f102 0104 	add.w	r1, r2, #4
 8001d7c:	6019      	str	r1, [r3, #0]
 8001d7e:	d0d7      	beq.n	8001d30 <_printf_i+0x50>
 8001d80:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da03      	bge.n	8001d90 <_printf_i+0xb0>
 8001d88:	222d      	movs	r2, #45	; 0x2d
 8001d8a:	425b      	negs	r3, r3
 8001d8c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001d90:	4962      	ldr	r1, [pc, #392]	; (8001f1c <_printf_i+0x23c>)
 8001d92:	220a      	movs	r2, #10
 8001d94:	e017      	b.n	8001dc6 <_printf_i+0xe6>
 8001d96:	6820      	ldr	r0, [r4, #0]
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d9e:	d003      	beq.n	8001da8 <_printf_i+0xc8>
 8001da0:	1d08      	adds	r0, r1, #4
 8001da2:	6018      	str	r0, [r3, #0]
 8001da4:	680b      	ldr	r3, [r1, #0]
 8001da6:	e006      	b.n	8001db6 <_printf_i+0xd6>
 8001da8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001dac:	f101 0004 	add.w	r0, r1, #4
 8001db0:	6018      	str	r0, [r3, #0]
 8001db2:	d0f7      	beq.n	8001da4 <_printf_i+0xc4>
 8001db4:	880b      	ldrh	r3, [r1, #0]
 8001db6:	4959      	ldr	r1, [pc, #356]	; (8001f1c <_printf_i+0x23c>)
 8001db8:	2a6f      	cmp	r2, #111	; 0x6f
 8001dba:	bf14      	ite	ne
 8001dbc:	220a      	movne	r2, #10
 8001dbe:	2208      	moveq	r2, #8
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001dc6:	6865      	ldr	r5, [r4, #4]
 8001dc8:	60a5      	str	r5, [r4, #8]
 8001dca:	2d00      	cmp	r5, #0
 8001dcc:	f2c0 809c 	blt.w	8001f08 <_printf_i+0x228>
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	f020 0004 	bic.w	r0, r0, #4
 8001dd6:	6020      	str	r0, [r4, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d13f      	bne.n	8001e5c <_printf_i+0x17c>
 8001ddc:	2d00      	cmp	r5, #0
 8001dde:	f040 8095 	bne.w	8001f0c <_printf_i+0x22c>
 8001de2:	4675      	mov	r5, lr
 8001de4:	2a08      	cmp	r2, #8
 8001de6:	d10b      	bne.n	8001e00 <_printf_i+0x120>
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	07da      	lsls	r2, r3, #31
 8001dec:	d508      	bpl.n	8001e00 <_printf_i+0x120>
 8001dee:	6923      	ldr	r3, [r4, #16]
 8001df0:	6862      	ldr	r2, [r4, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	bfde      	ittt	le
 8001df6:	2330      	movle	r3, #48	; 0x30
 8001df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e00:	ebae 0305 	sub.w	r3, lr, r5
 8001e04:	6123      	str	r3, [r4, #16]
 8001e06:	f8cd 8000 	str.w	r8, [sp]
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	aa03      	add	r2, sp, #12
 8001e0e:	4621      	mov	r1, r4
 8001e10:	4630      	mov	r0, r6
 8001e12:	f7ff feef 	bl	8001bf4 <_printf_common>
 8001e16:	3001      	adds	r0, #1
 8001e18:	d155      	bne.n	8001ec6 <_printf_i+0x1e6>
 8001e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1e:	b005      	add	sp, #20
 8001e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e24:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001e28:	493c      	ldr	r1, [pc, #240]	; (8001f1c <_printf_i+0x23c>)
 8001e2a:	6822      	ldr	r2, [r4, #0]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e32:	f100 0504 	add.w	r5, r0, #4
 8001e36:	601d      	str	r5, [r3, #0]
 8001e38:	d001      	beq.n	8001e3e <_printf_i+0x15e>
 8001e3a:	6803      	ldr	r3, [r0, #0]
 8001e3c:	e002      	b.n	8001e44 <_printf_i+0x164>
 8001e3e:	0655      	lsls	r5, r2, #25
 8001e40:	d5fb      	bpl.n	8001e3a <_printf_i+0x15a>
 8001e42:	8803      	ldrh	r3, [r0, #0]
 8001e44:	07d0      	lsls	r0, r2, #31
 8001e46:	bf44      	itt	mi
 8001e48:	f042 0220 	orrmi.w	r2, r2, #32
 8001e4c:	6022      	strmi	r2, [r4, #0]
 8001e4e:	b91b      	cbnz	r3, 8001e58 <_printf_i+0x178>
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	f022 0220 	bic.w	r2, r2, #32
 8001e56:	6022      	str	r2, [r4, #0]
 8001e58:	2210      	movs	r2, #16
 8001e5a:	e7b1      	b.n	8001dc0 <_printf_i+0xe0>
 8001e5c:	4675      	mov	r5, lr
 8001e5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8001e62:	fb02 3310 	mls	r3, r2, r0, r3
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d1f5      	bne.n	8001e5e <_printf_i+0x17e>
 8001e72:	e7b7      	b.n	8001de4 <_printf_i+0x104>
 8001e74:	6808      	ldr	r0, [r1, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	6949      	ldr	r1, [r1, #20]
 8001e7a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e7e:	d004      	beq.n	8001e8a <_printf_i+0x1aa>
 8001e80:	1d10      	adds	r0, r2, #4
 8001e82:	6018      	str	r0, [r3, #0]
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	6019      	str	r1, [r3, #0]
 8001e88:	e007      	b.n	8001e9a <_printf_i+0x1ba>
 8001e8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e8e:	f102 0004 	add.w	r0, r2, #4
 8001e92:	6018      	str	r0, [r3, #0]
 8001e94:	6813      	ldr	r3, [r2, #0]
 8001e96:	d0f6      	beq.n	8001e86 <_printf_i+0x1a6>
 8001e98:	8019      	strh	r1, [r3, #0]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	6123      	str	r3, [r4, #16]
 8001e9e:	4675      	mov	r5, lr
 8001ea0:	e7b1      	b.n	8001e06 <_printf_i+0x126>
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	1d11      	adds	r1, r2, #4
 8001ea6:	6019      	str	r1, [r3, #0]
 8001ea8:	6815      	ldr	r5, [r2, #0]
 8001eaa:	6862      	ldr	r2, [r4, #4]
 8001eac:	2100      	movs	r1, #0
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f7fe f996 	bl	80001e0 <memchr>
 8001eb4:	b108      	cbz	r0, 8001eba <_printf_i+0x1da>
 8001eb6:	1b40      	subs	r0, r0, r5
 8001eb8:	6060      	str	r0, [r4, #4]
 8001eba:	6863      	ldr	r3, [r4, #4]
 8001ebc:	6123      	str	r3, [r4, #16]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ec4:	e79f      	b.n	8001e06 <_printf_i+0x126>
 8001ec6:	6923      	ldr	r3, [r4, #16]
 8001ec8:	462a      	mov	r2, r5
 8001eca:	4639      	mov	r1, r7
 8001ecc:	4630      	mov	r0, r6
 8001ece:	47c0      	blx	r8
 8001ed0:	3001      	adds	r0, #1
 8001ed2:	d0a2      	beq.n	8001e1a <_printf_i+0x13a>
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	079b      	lsls	r3, r3, #30
 8001ed8:	d507      	bpl.n	8001eea <_printf_i+0x20a>
 8001eda:	2500      	movs	r5, #0
 8001edc:	f104 0919 	add.w	r9, r4, #25
 8001ee0:	68e3      	ldr	r3, [r4, #12]
 8001ee2:	9a03      	ldr	r2, [sp, #12]
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	429d      	cmp	r5, r3
 8001ee8:	db05      	blt.n	8001ef6 <_printf_i+0x216>
 8001eea:	68e0      	ldr	r0, [r4, #12]
 8001eec:	9b03      	ldr	r3, [sp, #12]
 8001eee:	4298      	cmp	r0, r3
 8001ef0:	bfb8      	it	lt
 8001ef2:	4618      	movlt	r0, r3
 8001ef4:	e793      	b.n	8001e1e <_printf_i+0x13e>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	464a      	mov	r2, r9
 8001efa:	4639      	mov	r1, r7
 8001efc:	4630      	mov	r0, r6
 8001efe:	47c0      	blx	r8
 8001f00:	3001      	adds	r0, #1
 8001f02:	d08a      	beq.n	8001e1a <_printf_i+0x13a>
 8001f04:	3501      	adds	r5, #1
 8001f06:	e7eb      	b.n	8001ee0 <_printf_i+0x200>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1a7      	bne.n	8001e5c <_printf_i+0x17c>
 8001f0c:	780b      	ldrb	r3, [r1, #0]
 8001f0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f16:	e765      	b.n	8001de4 <_printf_i+0x104>
 8001f18:	08002686 	.word	0x08002686
 8001f1c:	08002675 	.word	0x08002675

08001f20 <_sbrk_r>:
 8001f20:	b538      	push	{r3, r4, r5, lr}
 8001f22:	4c06      	ldr	r4, [pc, #24]	; (8001f3c <_sbrk_r+0x1c>)
 8001f24:	2300      	movs	r3, #0
 8001f26:	4605      	mov	r5, r0
 8001f28:	4608      	mov	r0, r1
 8001f2a:	6023      	str	r3, [r4, #0]
 8001f2c:	f000 fb02 	bl	8002534 <_sbrk>
 8001f30:	1c43      	adds	r3, r0, #1
 8001f32:	d102      	bne.n	8001f3a <_sbrk_r+0x1a>
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	b103      	cbz	r3, 8001f3a <_sbrk_r+0x1a>
 8001f38:	602b      	str	r3, [r5, #0]
 8001f3a:	bd38      	pop	{r3, r4, r5, pc}
 8001f3c:	20000120 	.word	0x20000120

08001f40 <__sread>:
 8001f40:	b510      	push	{r4, lr}
 8001f42:	460c      	mov	r4, r1
 8001f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f48:	f000 fa98 	bl	800247c <_read_r>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	bfab      	itete	ge
 8001f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f52:	89a3      	ldrhlt	r3, [r4, #12]
 8001f54:	181b      	addge	r3, r3, r0
 8001f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f5a:	bfac      	ite	ge
 8001f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f5e:	81a3      	strhlt	r3, [r4, #12]
 8001f60:	bd10      	pop	{r4, pc}

08001f62 <__swrite>:
 8001f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f66:	461f      	mov	r7, r3
 8001f68:	898b      	ldrh	r3, [r1, #12]
 8001f6a:	05db      	lsls	r3, r3, #23
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	460c      	mov	r4, r1
 8001f70:	4616      	mov	r6, r2
 8001f72:	d505      	bpl.n	8001f80 <__swrite+0x1e>
 8001f74:	2302      	movs	r3, #2
 8001f76:	2200      	movs	r2, #0
 8001f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f7c:	f000 f9b8 	bl	80022f0 <_lseek_r>
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f8a:	81a3      	strh	r3, [r4, #12]
 8001f8c:	4632      	mov	r2, r6
 8001f8e:	463b      	mov	r3, r7
 8001f90:	4628      	mov	r0, r5
 8001f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f96:	f000 b869 	b.w	800206c <_write_r>

08001f9a <__sseek>:
 8001f9a:	b510      	push	{r4, lr}
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fa2:	f000 f9a5 	bl	80022f0 <_lseek_r>
 8001fa6:	1c43      	adds	r3, r0, #1
 8001fa8:	89a3      	ldrh	r3, [r4, #12]
 8001faa:	bf15      	itete	ne
 8001fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fb6:	81a3      	strheq	r3, [r4, #12]
 8001fb8:	bf18      	it	ne
 8001fba:	81a3      	strhne	r3, [r4, #12]
 8001fbc:	bd10      	pop	{r4, pc}

08001fbe <__sclose>:
 8001fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fc2:	f000 b8d3 	b.w	800216c <_close_r>
	...

08001fc8 <__swbuf_r>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	460e      	mov	r6, r1
 8001fcc:	4614      	mov	r4, r2
 8001fce:	4605      	mov	r5, r0
 8001fd0:	b118      	cbz	r0, 8001fda <__swbuf_r+0x12>
 8001fd2:	6983      	ldr	r3, [r0, #24]
 8001fd4:	b90b      	cbnz	r3, 8001fda <__swbuf_r+0x12>
 8001fd6:	f7ff fbdd 	bl	8001794 <__sinit>
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <__swbuf_r+0x98>)
 8001fdc:	429c      	cmp	r4, r3
 8001fde:	d12a      	bne.n	8002036 <__swbuf_r+0x6e>
 8001fe0:	686c      	ldr	r4, [r5, #4]
 8001fe2:	69a3      	ldr	r3, [r4, #24]
 8001fe4:	60a3      	str	r3, [r4, #8]
 8001fe6:	89a3      	ldrh	r3, [r4, #12]
 8001fe8:	071a      	lsls	r2, r3, #28
 8001fea:	d52e      	bpl.n	800204a <__swbuf_r+0x82>
 8001fec:	6923      	ldr	r3, [r4, #16]
 8001fee:	b363      	cbz	r3, 800204a <__swbuf_r+0x82>
 8001ff0:	6923      	ldr	r3, [r4, #16]
 8001ff2:	6820      	ldr	r0, [r4, #0]
 8001ff4:	1ac0      	subs	r0, r0, r3
 8001ff6:	6963      	ldr	r3, [r4, #20]
 8001ff8:	b2f6      	uxtb	r6, r6
 8001ffa:	4298      	cmp	r0, r3
 8001ffc:	4637      	mov	r7, r6
 8001ffe:	db04      	blt.n	800200a <__swbuf_r+0x42>
 8002000:	4621      	mov	r1, r4
 8002002:	4628      	mov	r0, r5
 8002004:	f000 f94a 	bl	800229c <_fflush_r>
 8002008:	bb28      	cbnz	r0, 8002056 <__swbuf_r+0x8e>
 800200a:	68a3      	ldr	r3, [r4, #8]
 800200c:	3b01      	subs	r3, #1
 800200e:	60a3      	str	r3, [r4, #8]
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	6022      	str	r2, [r4, #0]
 8002016:	701e      	strb	r6, [r3, #0]
 8002018:	6963      	ldr	r3, [r4, #20]
 800201a:	3001      	adds	r0, #1
 800201c:	4298      	cmp	r0, r3
 800201e:	d004      	beq.n	800202a <__swbuf_r+0x62>
 8002020:	89a3      	ldrh	r3, [r4, #12]
 8002022:	07db      	lsls	r3, r3, #31
 8002024:	d519      	bpl.n	800205a <__swbuf_r+0x92>
 8002026:	2e0a      	cmp	r6, #10
 8002028:	d117      	bne.n	800205a <__swbuf_r+0x92>
 800202a:	4621      	mov	r1, r4
 800202c:	4628      	mov	r0, r5
 800202e:	f000 f935 	bl	800229c <_fflush_r>
 8002032:	b190      	cbz	r0, 800205a <__swbuf_r+0x92>
 8002034:	e00f      	b.n	8002056 <__swbuf_r+0x8e>
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <__swbuf_r+0x9c>)
 8002038:	429c      	cmp	r4, r3
 800203a:	d101      	bne.n	8002040 <__swbuf_r+0x78>
 800203c:	68ac      	ldr	r4, [r5, #8]
 800203e:	e7d0      	b.n	8001fe2 <__swbuf_r+0x1a>
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <__swbuf_r+0xa0>)
 8002042:	429c      	cmp	r4, r3
 8002044:	bf08      	it	eq
 8002046:	68ec      	ldreq	r4, [r5, #12]
 8002048:	e7cb      	b.n	8001fe2 <__swbuf_r+0x1a>
 800204a:	4621      	mov	r1, r4
 800204c:	4628      	mov	r0, r5
 800204e:	f000 f81f 	bl	8002090 <__swsetup_r>
 8002052:	2800      	cmp	r0, #0
 8002054:	d0cc      	beq.n	8001ff0 <__swbuf_r+0x28>
 8002056:	f04f 37ff 	mov.w	r7, #4294967295
 800205a:	4638      	mov	r0, r7
 800205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205e:	bf00      	nop
 8002060:	08002620 	.word	0x08002620
 8002064:	08002640 	.word	0x08002640
 8002068:	08002600 	.word	0x08002600

0800206c <_write_r>:
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	4c07      	ldr	r4, [pc, #28]	; (800208c <_write_r+0x20>)
 8002070:	4605      	mov	r5, r0
 8002072:	4608      	mov	r0, r1
 8002074:	4611      	mov	r1, r2
 8002076:	2200      	movs	r2, #0
 8002078:	6022      	str	r2, [r4, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	f7ff f9e0 	bl	8001440 <_write>
 8002080:	1c43      	adds	r3, r0, #1
 8002082:	d102      	bne.n	800208a <_write_r+0x1e>
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	b103      	cbz	r3, 800208a <_write_r+0x1e>
 8002088:	602b      	str	r3, [r5, #0]
 800208a:	bd38      	pop	{r3, r4, r5, pc}
 800208c:	20000120 	.word	0x20000120

08002090 <__swsetup_r>:
 8002090:	4b32      	ldr	r3, [pc, #200]	; (800215c <__swsetup_r+0xcc>)
 8002092:	b570      	push	{r4, r5, r6, lr}
 8002094:	681d      	ldr	r5, [r3, #0]
 8002096:	4606      	mov	r6, r0
 8002098:	460c      	mov	r4, r1
 800209a:	b125      	cbz	r5, 80020a6 <__swsetup_r+0x16>
 800209c:	69ab      	ldr	r3, [r5, #24]
 800209e:	b913      	cbnz	r3, 80020a6 <__swsetup_r+0x16>
 80020a0:	4628      	mov	r0, r5
 80020a2:	f7ff fb77 	bl	8001794 <__sinit>
 80020a6:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <__swsetup_r+0xd0>)
 80020a8:	429c      	cmp	r4, r3
 80020aa:	d10f      	bne.n	80020cc <__swsetup_r+0x3c>
 80020ac:	686c      	ldr	r4, [r5, #4]
 80020ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	0715      	lsls	r5, r2, #28
 80020b6:	d42c      	bmi.n	8002112 <__swsetup_r+0x82>
 80020b8:	06d0      	lsls	r0, r2, #27
 80020ba:	d411      	bmi.n	80020e0 <__swsetup_r+0x50>
 80020bc:	2209      	movs	r2, #9
 80020be:	6032      	str	r2, [r6, #0]
 80020c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c4:	81a3      	strh	r3, [r4, #12]
 80020c6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <__swsetup_r+0xd4>)
 80020ce:	429c      	cmp	r4, r3
 80020d0:	d101      	bne.n	80020d6 <__swsetup_r+0x46>
 80020d2:	68ac      	ldr	r4, [r5, #8]
 80020d4:	e7eb      	b.n	80020ae <__swsetup_r+0x1e>
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <__swsetup_r+0xd8>)
 80020d8:	429c      	cmp	r4, r3
 80020da:	bf08      	it	eq
 80020dc:	68ec      	ldreq	r4, [r5, #12]
 80020de:	e7e6      	b.n	80020ae <__swsetup_r+0x1e>
 80020e0:	0751      	lsls	r1, r2, #29
 80020e2:	d512      	bpl.n	800210a <__swsetup_r+0x7a>
 80020e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020e6:	b141      	cbz	r1, 80020fa <__swsetup_r+0x6a>
 80020e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020ec:	4299      	cmp	r1, r3
 80020ee:	d002      	beq.n	80020f6 <__swsetup_r+0x66>
 80020f0:	4630      	mov	r0, r6
 80020f2:	f000 f975 	bl	80023e0 <_free_r>
 80020f6:	2300      	movs	r3, #0
 80020f8:	6363      	str	r3, [r4, #52]	; 0x34
 80020fa:	89a3      	ldrh	r3, [r4, #12]
 80020fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002100:	81a3      	strh	r3, [r4, #12]
 8002102:	2300      	movs	r3, #0
 8002104:	6063      	str	r3, [r4, #4]
 8002106:	6923      	ldr	r3, [r4, #16]
 8002108:	6023      	str	r3, [r4, #0]
 800210a:	89a3      	ldrh	r3, [r4, #12]
 800210c:	f043 0308 	orr.w	r3, r3, #8
 8002110:	81a3      	strh	r3, [r4, #12]
 8002112:	6923      	ldr	r3, [r4, #16]
 8002114:	b94b      	cbnz	r3, 800212a <__swsetup_r+0x9a>
 8002116:	89a3      	ldrh	r3, [r4, #12]
 8002118:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800211c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002120:	d003      	beq.n	800212a <__swsetup_r+0x9a>
 8002122:	4621      	mov	r1, r4
 8002124:	4630      	mov	r0, r6
 8002126:	f000 f919 	bl	800235c <__smakebuf_r>
 800212a:	89a2      	ldrh	r2, [r4, #12]
 800212c:	f012 0301 	ands.w	r3, r2, #1
 8002130:	d00c      	beq.n	800214c <__swsetup_r+0xbc>
 8002132:	2300      	movs	r3, #0
 8002134:	60a3      	str	r3, [r4, #8]
 8002136:	6963      	ldr	r3, [r4, #20]
 8002138:	425b      	negs	r3, r3
 800213a:	61a3      	str	r3, [r4, #24]
 800213c:	6923      	ldr	r3, [r4, #16]
 800213e:	b953      	cbnz	r3, 8002156 <__swsetup_r+0xc6>
 8002140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002144:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002148:	d1ba      	bne.n	80020c0 <__swsetup_r+0x30>
 800214a:	bd70      	pop	{r4, r5, r6, pc}
 800214c:	0792      	lsls	r2, r2, #30
 800214e:	bf58      	it	pl
 8002150:	6963      	ldrpl	r3, [r4, #20]
 8002152:	60a3      	str	r3, [r4, #8]
 8002154:	e7f2      	b.n	800213c <__swsetup_r+0xac>
 8002156:	2000      	movs	r0, #0
 8002158:	e7f7      	b.n	800214a <__swsetup_r+0xba>
 800215a:	bf00      	nop
 800215c:	2000000c 	.word	0x2000000c
 8002160:	08002620 	.word	0x08002620
 8002164:	08002640 	.word	0x08002640
 8002168:	08002600 	.word	0x08002600

0800216c <_close_r>:
 800216c:	b538      	push	{r3, r4, r5, lr}
 800216e:	4c06      	ldr	r4, [pc, #24]	; (8002188 <_close_r+0x1c>)
 8002170:	2300      	movs	r3, #0
 8002172:	4605      	mov	r5, r0
 8002174:	4608      	mov	r0, r1
 8002176:	6023      	str	r3, [r4, #0]
 8002178:	f000 f9b4 	bl	80024e4 <_close>
 800217c:	1c43      	adds	r3, r0, #1
 800217e:	d102      	bne.n	8002186 <_close_r+0x1a>
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	b103      	cbz	r3, 8002186 <_close_r+0x1a>
 8002184:	602b      	str	r3, [r5, #0]
 8002186:	bd38      	pop	{r3, r4, r5, pc}
 8002188:	20000120 	.word	0x20000120

0800218c <__sflush_r>:
 800218c:	898a      	ldrh	r2, [r1, #12]
 800218e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002192:	4605      	mov	r5, r0
 8002194:	0710      	lsls	r0, r2, #28
 8002196:	460c      	mov	r4, r1
 8002198:	d45a      	bmi.n	8002250 <__sflush_r+0xc4>
 800219a:	684b      	ldr	r3, [r1, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	dc05      	bgt.n	80021ac <__sflush_r+0x20>
 80021a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	dc02      	bgt.n	80021ac <__sflush_r+0x20>
 80021a6:	2000      	movs	r0, #0
 80021a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021ae:	2e00      	cmp	r6, #0
 80021b0:	d0f9      	beq.n	80021a6 <__sflush_r+0x1a>
 80021b2:	2300      	movs	r3, #0
 80021b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021b8:	682f      	ldr	r7, [r5, #0]
 80021ba:	602b      	str	r3, [r5, #0]
 80021bc:	d033      	beq.n	8002226 <__sflush_r+0x9a>
 80021be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021c0:	89a3      	ldrh	r3, [r4, #12]
 80021c2:	075a      	lsls	r2, r3, #29
 80021c4:	d505      	bpl.n	80021d2 <__sflush_r+0x46>
 80021c6:	6863      	ldr	r3, [r4, #4]
 80021c8:	1ac0      	subs	r0, r0, r3
 80021ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021cc:	b10b      	cbz	r3, 80021d2 <__sflush_r+0x46>
 80021ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021d0:	1ac0      	subs	r0, r0, r3
 80021d2:	2300      	movs	r3, #0
 80021d4:	4602      	mov	r2, r0
 80021d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021d8:	6a21      	ldr	r1, [r4, #32]
 80021da:	4628      	mov	r0, r5
 80021dc:	47b0      	blx	r6
 80021de:	1c43      	adds	r3, r0, #1
 80021e0:	89a3      	ldrh	r3, [r4, #12]
 80021e2:	d106      	bne.n	80021f2 <__sflush_r+0x66>
 80021e4:	6829      	ldr	r1, [r5, #0]
 80021e6:	291d      	cmp	r1, #29
 80021e8:	d84b      	bhi.n	8002282 <__sflush_r+0xf6>
 80021ea:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <__sflush_r+0x10c>)
 80021ec:	40ca      	lsrs	r2, r1
 80021ee:	07d6      	lsls	r6, r2, #31
 80021f0:	d547      	bpl.n	8002282 <__sflush_r+0xf6>
 80021f2:	2200      	movs	r2, #0
 80021f4:	6062      	str	r2, [r4, #4]
 80021f6:	04d9      	lsls	r1, r3, #19
 80021f8:	6922      	ldr	r2, [r4, #16]
 80021fa:	6022      	str	r2, [r4, #0]
 80021fc:	d504      	bpl.n	8002208 <__sflush_r+0x7c>
 80021fe:	1c42      	adds	r2, r0, #1
 8002200:	d101      	bne.n	8002206 <__sflush_r+0x7a>
 8002202:	682b      	ldr	r3, [r5, #0]
 8002204:	b903      	cbnz	r3, 8002208 <__sflush_r+0x7c>
 8002206:	6560      	str	r0, [r4, #84]	; 0x54
 8002208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800220a:	602f      	str	r7, [r5, #0]
 800220c:	2900      	cmp	r1, #0
 800220e:	d0ca      	beq.n	80021a6 <__sflush_r+0x1a>
 8002210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002214:	4299      	cmp	r1, r3
 8002216:	d002      	beq.n	800221e <__sflush_r+0x92>
 8002218:	4628      	mov	r0, r5
 800221a:	f000 f8e1 	bl	80023e0 <_free_r>
 800221e:	2000      	movs	r0, #0
 8002220:	6360      	str	r0, [r4, #52]	; 0x34
 8002222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002226:	6a21      	ldr	r1, [r4, #32]
 8002228:	2301      	movs	r3, #1
 800222a:	4628      	mov	r0, r5
 800222c:	47b0      	blx	r6
 800222e:	1c41      	adds	r1, r0, #1
 8002230:	d1c6      	bne.n	80021c0 <__sflush_r+0x34>
 8002232:	682b      	ldr	r3, [r5, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0c3      	beq.n	80021c0 <__sflush_r+0x34>
 8002238:	2b1d      	cmp	r3, #29
 800223a:	d001      	beq.n	8002240 <__sflush_r+0xb4>
 800223c:	2b16      	cmp	r3, #22
 800223e:	d101      	bne.n	8002244 <__sflush_r+0xb8>
 8002240:	602f      	str	r7, [r5, #0]
 8002242:	e7b0      	b.n	80021a6 <__sflush_r+0x1a>
 8002244:	89a3      	ldrh	r3, [r4, #12]
 8002246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800224a:	81a3      	strh	r3, [r4, #12]
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002250:	690f      	ldr	r7, [r1, #16]
 8002252:	2f00      	cmp	r7, #0
 8002254:	d0a7      	beq.n	80021a6 <__sflush_r+0x1a>
 8002256:	0793      	lsls	r3, r2, #30
 8002258:	680e      	ldr	r6, [r1, #0]
 800225a:	bf08      	it	eq
 800225c:	694b      	ldreq	r3, [r1, #20]
 800225e:	600f      	str	r7, [r1, #0]
 8002260:	bf18      	it	ne
 8002262:	2300      	movne	r3, #0
 8002264:	eba6 0807 	sub.w	r8, r6, r7
 8002268:	608b      	str	r3, [r1, #8]
 800226a:	f1b8 0f00 	cmp.w	r8, #0
 800226e:	dd9a      	ble.n	80021a6 <__sflush_r+0x1a>
 8002270:	4643      	mov	r3, r8
 8002272:	463a      	mov	r2, r7
 8002274:	6a21      	ldr	r1, [r4, #32]
 8002276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002278:	4628      	mov	r0, r5
 800227a:	47b0      	blx	r6
 800227c:	2800      	cmp	r0, #0
 800227e:	dc07      	bgt.n	8002290 <__sflush_r+0x104>
 8002280:	89a3      	ldrh	r3, [r4, #12]
 8002282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002286:	81a3      	strh	r3, [r4, #12]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002290:	4407      	add	r7, r0
 8002292:	eba8 0800 	sub.w	r8, r8, r0
 8002296:	e7e8      	b.n	800226a <__sflush_r+0xde>
 8002298:	20400001 	.word	0x20400001

0800229c <_fflush_r>:
 800229c:	b538      	push	{r3, r4, r5, lr}
 800229e:	690b      	ldr	r3, [r1, #16]
 80022a0:	4605      	mov	r5, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	b1db      	cbz	r3, 80022de <_fflush_r+0x42>
 80022a6:	b118      	cbz	r0, 80022b0 <_fflush_r+0x14>
 80022a8:	6983      	ldr	r3, [r0, #24]
 80022aa:	b90b      	cbnz	r3, 80022b0 <_fflush_r+0x14>
 80022ac:	f7ff fa72 	bl	8001794 <__sinit>
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <_fflush_r+0x48>)
 80022b2:	429c      	cmp	r4, r3
 80022b4:	d109      	bne.n	80022ca <_fflush_r+0x2e>
 80022b6:	686c      	ldr	r4, [r5, #4]
 80022b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022bc:	b17b      	cbz	r3, 80022de <_fflush_r+0x42>
 80022be:	4621      	mov	r1, r4
 80022c0:	4628      	mov	r0, r5
 80022c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022c6:	f7ff bf61 	b.w	800218c <__sflush_r>
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <_fflush_r+0x4c>)
 80022cc:	429c      	cmp	r4, r3
 80022ce:	d101      	bne.n	80022d4 <_fflush_r+0x38>
 80022d0:	68ac      	ldr	r4, [r5, #8]
 80022d2:	e7f1      	b.n	80022b8 <_fflush_r+0x1c>
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <_fflush_r+0x50>)
 80022d6:	429c      	cmp	r4, r3
 80022d8:	bf08      	it	eq
 80022da:	68ec      	ldreq	r4, [r5, #12]
 80022dc:	e7ec      	b.n	80022b8 <_fflush_r+0x1c>
 80022de:	2000      	movs	r0, #0
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	08002620 	.word	0x08002620
 80022e8:	08002640 	.word	0x08002640
 80022ec:	08002600 	.word	0x08002600

080022f0 <_lseek_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4c07      	ldr	r4, [pc, #28]	; (8002310 <_lseek_r+0x20>)
 80022f4:	4605      	mov	r5, r0
 80022f6:	4608      	mov	r0, r1
 80022f8:	4611      	mov	r1, r2
 80022fa:	2200      	movs	r2, #0
 80022fc:	6022      	str	r2, [r4, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	f000 f908 	bl	8002514 <_lseek>
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	d102      	bne.n	800230e <_lseek_r+0x1e>
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	b103      	cbz	r3, 800230e <_lseek_r+0x1e>
 800230c:	602b      	str	r3, [r5, #0]
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	20000120 	.word	0x20000120

08002314 <__swhatbuf_r>:
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	460e      	mov	r6, r1
 8002318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800231c:	2900      	cmp	r1, #0
 800231e:	b090      	sub	sp, #64	; 0x40
 8002320:	4614      	mov	r4, r2
 8002322:	461d      	mov	r5, r3
 8002324:	da07      	bge.n	8002336 <__swhatbuf_r+0x22>
 8002326:	2300      	movs	r3, #0
 8002328:	602b      	str	r3, [r5, #0]
 800232a:	89b3      	ldrh	r3, [r6, #12]
 800232c:	061a      	lsls	r2, r3, #24
 800232e:	d410      	bmi.n	8002352 <__swhatbuf_r+0x3e>
 8002330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002334:	e00e      	b.n	8002354 <__swhatbuf_r+0x40>
 8002336:	aa01      	add	r2, sp, #4
 8002338:	f000 f8b2 	bl	80024a0 <_fstat_r>
 800233c:	2800      	cmp	r0, #0
 800233e:	dbf2      	blt.n	8002326 <__swhatbuf_r+0x12>
 8002340:	9a02      	ldr	r2, [sp, #8]
 8002342:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002346:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800234a:	425a      	negs	r2, r3
 800234c:	415a      	adcs	r2, r3
 800234e:	602a      	str	r2, [r5, #0]
 8002350:	e7ee      	b.n	8002330 <__swhatbuf_r+0x1c>
 8002352:	2340      	movs	r3, #64	; 0x40
 8002354:	2000      	movs	r0, #0
 8002356:	6023      	str	r3, [r4, #0]
 8002358:	b010      	add	sp, #64	; 0x40
 800235a:	bd70      	pop	{r4, r5, r6, pc}

0800235c <__smakebuf_r>:
 800235c:	898b      	ldrh	r3, [r1, #12]
 800235e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002360:	079d      	lsls	r5, r3, #30
 8002362:	4606      	mov	r6, r0
 8002364:	460c      	mov	r4, r1
 8002366:	d507      	bpl.n	8002378 <__smakebuf_r+0x1c>
 8002368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800236c:	6023      	str	r3, [r4, #0]
 800236e:	6123      	str	r3, [r4, #16]
 8002370:	2301      	movs	r3, #1
 8002372:	6163      	str	r3, [r4, #20]
 8002374:	b002      	add	sp, #8
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	ab01      	add	r3, sp, #4
 800237a:	466a      	mov	r2, sp
 800237c:	f7ff ffca 	bl	8002314 <__swhatbuf_r>
 8002380:	9900      	ldr	r1, [sp, #0]
 8002382:	4605      	mov	r5, r0
 8002384:	4630      	mov	r0, r6
 8002386:	f7ff fa97 	bl	80018b8 <_malloc_r>
 800238a:	b948      	cbnz	r0, 80023a0 <__smakebuf_r+0x44>
 800238c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002390:	059a      	lsls	r2, r3, #22
 8002392:	d4ef      	bmi.n	8002374 <__smakebuf_r+0x18>
 8002394:	f023 0303 	bic.w	r3, r3, #3
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	e7e3      	b.n	8002368 <__smakebuf_r+0xc>
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <__smakebuf_r+0x7c>)
 80023a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80023a4:	89a3      	ldrh	r3, [r4, #12]
 80023a6:	6020      	str	r0, [r4, #0]
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	81a3      	strh	r3, [r4, #12]
 80023ae:	9b00      	ldr	r3, [sp, #0]
 80023b0:	6163      	str	r3, [r4, #20]
 80023b2:	9b01      	ldr	r3, [sp, #4]
 80023b4:	6120      	str	r0, [r4, #16]
 80023b6:	b15b      	cbz	r3, 80023d0 <__smakebuf_r+0x74>
 80023b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023bc:	4630      	mov	r0, r6
 80023be:	f000 f881 	bl	80024c4 <_isatty_r>
 80023c2:	b128      	cbz	r0, 80023d0 <__smakebuf_r+0x74>
 80023c4:	89a3      	ldrh	r3, [r4, #12]
 80023c6:	f023 0303 	bic.w	r3, r3, #3
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	81a3      	strh	r3, [r4, #12]
 80023d0:	89a3      	ldrh	r3, [r4, #12]
 80023d2:	431d      	orrs	r5, r3
 80023d4:	81a5      	strh	r5, [r4, #12]
 80023d6:	e7cd      	b.n	8002374 <__smakebuf_r+0x18>
 80023d8:	08001715 	.word	0x08001715

080023dc <__malloc_lock>:
 80023dc:	4770      	bx	lr

080023de <__malloc_unlock>:
 80023de:	4770      	bx	lr

080023e0 <_free_r>:
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4605      	mov	r5, r0
 80023e4:	2900      	cmp	r1, #0
 80023e6:	d045      	beq.n	8002474 <_free_r+0x94>
 80023e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023ec:	1f0c      	subs	r4, r1, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bfb8      	it	lt
 80023f2:	18e4      	addlt	r4, r4, r3
 80023f4:	f7ff fff2 	bl	80023dc <__malloc_lock>
 80023f8:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <_free_r+0x98>)
 80023fa:	6813      	ldr	r3, [r2, #0]
 80023fc:	4610      	mov	r0, r2
 80023fe:	b933      	cbnz	r3, 800240e <_free_r+0x2e>
 8002400:	6063      	str	r3, [r4, #4]
 8002402:	6014      	str	r4, [r2, #0]
 8002404:	4628      	mov	r0, r5
 8002406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800240a:	f7ff bfe8 	b.w	80023de <__malloc_unlock>
 800240e:	42a3      	cmp	r3, r4
 8002410:	d90c      	bls.n	800242c <_free_r+0x4c>
 8002412:	6821      	ldr	r1, [r4, #0]
 8002414:	1862      	adds	r2, r4, r1
 8002416:	4293      	cmp	r3, r2
 8002418:	bf04      	itt	eq
 800241a:	681a      	ldreq	r2, [r3, #0]
 800241c:	685b      	ldreq	r3, [r3, #4]
 800241e:	6063      	str	r3, [r4, #4]
 8002420:	bf04      	itt	eq
 8002422:	1852      	addeq	r2, r2, r1
 8002424:	6022      	streq	r2, [r4, #0]
 8002426:	6004      	str	r4, [r0, #0]
 8002428:	e7ec      	b.n	8002404 <_free_r+0x24>
 800242a:	4613      	mov	r3, r2
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	b10a      	cbz	r2, 8002434 <_free_r+0x54>
 8002430:	42a2      	cmp	r2, r4
 8002432:	d9fa      	bls.n	800242a <_free_r+0x4a>
 8002434:	6819      	ldr	r1, [r3, #0]
 8002436:	1858      	adds	r0, r3, r1
 8002438:	42a0      	cmp	r0, r4
 800243a:	d10b      	bne.n	8002454 <_free_r+0x74>
 800243c:	6820      	ldr	r0, [r4, #0]
 800243e:	4401      	add	r1, r0
 8002440:	1858      	adds	r0, r3, r1
 8002442:	4282      	cmp	r2, r0
 8002444:	6019      	str	r1, [r3, #0]
 8002446:	d1dd      	bne.n	8002404 <_free_r+0x24>
 8002448:	6810      	ldr	r0, [r2, #0]
 800244a:	6852      	ldr	r2, [r2, #4]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	4401      	add	r1, r0
 8002450:	6019      	str	r1, [r3, #0]
 8002452:	e7d7      	b.n	8002404 <_free_r+0x24>
 8002454:	d902      	bls.n	800245c <_free_r+0x7c>
 8002456:	230c      	movs	r3, #12
 8002458:	602b      	str	r3, [r5, #0]
 800245a:	e7d3      	b.n	8002404 <_free_r+0x24>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	1821      	adds	r1, r4, r0
 8002460:	428a      	cmp	r2, r1
 8002462:	bf04      	itt	eq
 8002464:	6811      	ldreq	r1, [r2, #0]
 8002466:	6852      	ldreq	r2, [r2, #4]
 8002468:	6062      	str	r2, [r4, #4]
 800246a:	bf04      	itt	eq
 800246c:	1809      	addeq	r1, r1, r0
 800246e:	6021      	streq	r1, [r4, #0]
 8002470:	605c      	str	r4, [r3, #4]
 8002472:	e7c7      	b.n	8002404 <_free_r+0x24>
 8002474:	bd38      	pop	{r3, r4, r5, pc}
 8002476:	bf00      	nop
 8002478:	20000094 	.word	0x20000094

0800247c <_read_r>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4c07      	ldr	r4, [pc, #28]	; (800249c <_read_r+0x20>)
 8002480:	4605      	mov	r5, r0
 8002482:	4608      	mov	r0, r1
 8002484:	4611      	mov	r1, r2
 8002486:	2200      	movs	r2, #0
 8002488:	6022      	str	r2, [r4, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	f000 f84a 	bl	8002524 <_read>
 8002490:	1c43      	adds	r3, r0, #1
 8002492:	d102      	bne.n	800249a <_read_r+0x1e>
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	b103      	cbz	r3, 800249a <_read_r+0x1e>
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	bd38      	pop	{r3, r4, r5, pc}
 800249c:	20000120 	.word	0x20000120

080024a0 <_fstat_r>:
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	4c07      	ldr	r4, [pc, #28]	; (80024c0 <_fstat_r+0x20>)
 80024a4:	2300      	movs	r3, #0
 80024a6:	4605      	mov	r5, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	6023      	str	r3, [r4, #0]
 80024ae:	f000 f821 	bl	80024f4 <_fstat>
 80024b2:	1c43      	adds	r3, r0, #1
 80024b4:	d102      	bne.n	80024bc <_fstat_r+0x1c>
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	b103      	cbz	r3, 80024bc <_fstat_r+0x1c>
 80024ba:	602b      	str	r3, [r5, #0]
 80024bc:	bd38      	pop	{r3, r4, r5, pc}
 80024be:	bf00      	nop
 80024c0:	20000120 	.word	0x20000120

080024c4 <_isatty_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4c06      	ldr	r4, [pc, #24]	; (80024e0 <_isatty_r+0x1c>)
 80024c8:	2300      	movs	r3, #0
 80024ca:	4605      	mov	r5, r0
 80024cc:	4608      	mov	r0, r1
 80024ce:	6023      	str	r3, [r4, #0]
 80024d0:	f000 f818 	bl	8002504 <_isatty>
 80024d4:	1c43      	adds	r3, r0, #1
 80024d6:	d102      	bne.n	80024de <_isatty_r+0x1a>
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	b103      	cbz	r3, 80024de <_isatty_r+0x1a>
 80024dc:	602b      	str	r3, [r5, #0]
 80024de:	bd38      	pop	{r3, r4, r5, pc}
 80024e0:	20000120 	.word	0x20000120

080024e4 <_close>:
 80024e4:	4b02      	ldr	r3, [pc, #8]	; (80024f0 <_close+0xc>)
 80024e6:	2258      	movs	r2, #88	; 0x58
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f04f 30ff 	mov.w	r0, #4294967295
 80024ee:	4770      	bx	lr
 80024f0:	20000120 	.word	0x20000120

080024f4 <_fstat>:
 80024f4:	4b02      	ldr	r3, [pc, #8]	; (8002500 <_fstat+0xc>)
 80024f6:	2258      	movs	r2, #88	; 0x58
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f04f 30ff 	mov.w	r0, #4294967295
 80024fe:	4770      	bx	lr
 8002500:	20000120 	.word	0x20000120

08002504 <_isatty>:
 8002504:	4b02      	ldr	r3, [pc, #8]	; (8002510 <_isatty+0xc>)
 8002506:	2258      	movs	r2, #88	; 0x58
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	2000      	movs	r0, #0
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000120 	.word	0x20000120

08002514 <_lseek>:
 8002514:	4b02      	ldr	r3, [pc, #8]	; (8002520 <_lseek+0xc>)
 8002516:	2258      	movs	r2, #88	; 0x58
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f04f 30ff 	mov.w	r0, #4294967295
 800251e:	4770      	bx	lr
 8002520:	20000120 	.word	0x20000120

08002524 <_read>:
 8002524:	4b02      	ldr	r3, [pc, #8]	; (8002530 <_read+0xc>)
 8002526:	2258      	movs	r2, #88	; 0x58
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f04f 30ff 	mov.w	r0, #4294967295
 800252e:	4770      	bx	lr
 8002530:	20000120 	.word	0x20000120

08002534 <_sbrk>:
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <_sbrk+0x14>)
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	4602      	mov	r2, r0
 800253a:	b909      	cbnz	r1, 8002540 <_sbrk+0xc>
 800253c:	4903      	ldr	r1, [pc, #12]	; (800254c <_sbrk+0x18>)
 800253e:	6019      	str	r1, [r3, #0]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	4402      	add	r2, r0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	4770      	bx	lr
 8002548:	2000009c 	.word	0x2000009c
 800254c:	20000124 	.word	0x20000124

08002550 <_init>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	bf00      	nop
 8002554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002556:	bc08      	pop	{r3}
 8002558:	469e      	mov	lr, r3
 800255a:	4770      	bx	lr

0800255c <_fini>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	bf00      	nop
 8002560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002562:	bc08      	pop	{r3}
 8002564:	469e      	mov	lr, r3
 8002566:	4770      	bx	lr
